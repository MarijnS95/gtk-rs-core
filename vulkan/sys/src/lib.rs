// Generated by gir (https://github.com/gtk-rs/gir @ bad7311422ee)
// from gir-files (https://github.com/gtk-rs/gir-files @ 81e605a49771)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]


#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Records
#[repr(C)]
pub struct VkAccelerationStructureCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAccelerationStructureCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccelerationStructureCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAccelerationStructureInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccelerationStructureInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAccelerationStructureMemoryRequirementsInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccelerationStructureMemoryRequirementsInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureMemoryRequirementsTypeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAccelerationStructureMemoryRequirementsTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccelerationStructureMemoryRequirementsTypeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAccelerationStructureNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccelerationStructureNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureTypeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAccelerationStructureTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccelerationStructureTypeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAccessFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAccessFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccessFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAccessFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAccessFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccessFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAcquireNextImageInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAcquireNextImageInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAcquireNextImageInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAllocationCallbacks {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAllocationCallbacks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAllocationCallbacks @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkApplicationInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkApplicationInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkApplicationInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentDescription {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentDescription @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentDescription2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentDescription2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentDescription2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentDescriptionFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentDescriptionFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentDescriptionFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentDescriptionFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentDescriptionFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentDescriptionFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentLoadOp {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentLoadOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentLoadOp @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentReference {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentReference @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentReference2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentReference2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentReference2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentSampleLocationsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentSampleLocationsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentSampleLocationsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentStoreOp {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkAttachmentStoreOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentStoreOp @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBaseInStructure {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBaseInStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBaseInStructure @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBaseOutStructure {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBaseOutStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBaseOutStructure @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindAccelerationStructureMemoryInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindAccelerationStructureMemoryInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindAccelerationStructureMemoryInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindBufferMemoryDeviceGroupInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindBufferMemoryDeviceGroupInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindBufferMemoryDeviceGroupInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindBufferMemoryDeviceGroupInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindBufferMemoryDeviceGroupInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindBufferMemoryInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindBufferMemoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindBufferMemoryInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindBufferMemoryInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindBufferMemoryInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindBufferMemoryInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindImageMemoryDeviceGroupInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindImageMemoryDeviceGroupInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemoryDeviceGroupInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindImageMemoryDeviceGroupInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindImageMemoryDeviceGroupInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemoryInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindImageMemoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindImageMemoryInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemoryInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindImageMemoryInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindImageMemoryInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemorySwapchainInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindImageMemorySwapchainInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindImageMemorySwapchainInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindImagePlaneMemoryInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindImagePlaneMemoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindImagePlaneMemoryInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindImagePlaneMemoryInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindImagePlaneMemoryInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindImagePlaneMemoryInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBindSparseInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBindSparseInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindSparseInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBlendFactor {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBlendFactor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBlendFactor @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBlendOp {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBlendOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBlendOp @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBlendOverlapEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBlendOverlapEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBlendOverlapEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBool32 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBool32 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBool32 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBorderColor {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBorderColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBorderColor @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBuffer {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBuffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBuffer @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferCopy {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferCopy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferCopy @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferDeviceAddressCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferDeviceAddressCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferDeviceAddressCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferDeviceAddressInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferDeviceAddressInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferDeviceAddressInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferImageCopy {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferImageCopy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferImageCopy @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferMemoryBarrier {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferMemoryBarrier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferMemoryBarrier @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferMemoryRequirementsInfo2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferMemoryRequirementsInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferMemoryRequirementsInfo2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferMemoryRequirementsInfo2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferMemoryRequirementsInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferMemoryRequirementsInfo2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferUsageFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferUsageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferUsageFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferUsageFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferUsageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferUsageFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferView {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferView @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferViewCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferViewCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferViewCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBufferViewCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBufferViewCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferViewCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBuildAccelerationStructureFlagBitsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBuildAccelerationStructureFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBuildAccelerationStructureFlagBitsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkBuildAccelerationStructureFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkBuildAccelerationStructureFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBuildAccelerationStructureFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCalibratedTimestampInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCalibratedTimestampInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCalibratedTimestampInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCheckpointDataNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCheckpointDataNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCheckpointDataNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkChromaLocation {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkChromaLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkChromaLocation @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkChromaLocationKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkChromaLocationKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkChromaLocationKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkClearAttachment {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkClearAttachment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearAttachment @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkClearColorValue {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkClearColorValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearColorValue @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkClearDepthStencilValue {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkClearDepthStencilValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearDepthStencilValue @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkClearRect {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkClearRect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearRect @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkClearValue {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkClearValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearValue @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCmdProcessCommandsInfoNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCmdProcessCommandsInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCmdProcessCommandsInfoNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCmdReserveSpaceForCommandsInfoNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCmdReserveSpaceForCommandsInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCmdReserveSpaceForCommandsInfoNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCoarseSampleLocationNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCoarseSampleLocationNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCoarseSampleLocationNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCoarseSampleOrderCustomNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCoarseSampleOrderCustomNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCoarseSampleOrderCustomNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCoarseSampleOrderTypeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCoarseSampleOrderTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCoarseSampleOrderTypeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkColorComponentFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkColorComponentFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkColorComponentFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkColorComponentFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkColorComponentFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkColorComponentFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkColorSpaceKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkColorSpaceKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkColorSpaceKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBuffer {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBuffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBuffer @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferAllocateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferAllocateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferBeginInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferBeginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferBeginInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferInheritanceConditionalRenderingInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferInheritanceInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferInheritanceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferInheritanceInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferLevel {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferLevel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferLevel @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferResetFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferResetFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferResetFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferResetFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferResetFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferResetFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferUsageFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferUsageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferUsageFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferUsageFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandBufferUsageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferUsageFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandPool {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPool @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandPoolCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandPoolCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandPoolCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolResetFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandPoolResetFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolResetFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolResetFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandPoolResetFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolResetFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolTrimFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandPoolTrimFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolTrimFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolTrimFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCommandPoolTrimFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolTrimFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCompareOp {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCompareOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCompareOp @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkComponentMapping {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkComponentMapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkComponentMapping @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkComponentSwizzle {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkComponentSwizzle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkComponentSwizzle @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkComponentTypeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkComponentTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkComponentTypeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCompositeAlphaFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCompositeAlphaFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCompositeAlphaFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCompositeAlphaFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCompositeAlphaFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCompositeAlphaFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkComputePipelineCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkComputePipelineCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkComputePipelineCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkConditionalRenderingBeginInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkConditionalRenderingBeginInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkConditionalRenderingBeginInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkConditionalRenderingFlagBitsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkConditionalRenderingFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkConditionalRenderingFlagBitsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkConditionalRenderingFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkConditionalRenderingFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkConditionalRenderingFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkConformanceVersionKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkConformanceVersionKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkConformanceVersionKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkConservativeRasterizationModeEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkConservativeRasterizationModeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkConservativeRasterizationModeEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCooperativeMatrixPropertiesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCooperativeMatrixPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCooperativeMatrixPropertiesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCopyAccelerationStructureModeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCopyAccelerationStructureModeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCopyAccelerationStructureModeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCopyDescriptorSet {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCopyDescriptorSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCopyDescriptorSet @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCoverageModulationModeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCoverageModulationModeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCoverageModulationModeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCoverageReductionModeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCoverageReductionModeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCoverageReductionModeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCullModeFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCullModeFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCullModeFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkCullModeFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkCullModeFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCullModeFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugMarkerMarkerInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugMarkerMarkerInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugMarkerMarkerInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugMarkerObjectNameInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugMarkerObjectNameInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugMarkerObjectNameInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugMarkerObjectTagInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugMarkerObjectTagInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugMarkerObjectTagInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportCallbackCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugReportCallbackCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugReportCallbackCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportCallbackEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugReportCallbackEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugReportCallbackEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportFlagBitsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugReportFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugReportFlagBitsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugReportFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugReportFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportObjectTypeEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugReportObjectTypeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugReportObjectTypeEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsLabelEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsLabelEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsLabelEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessageSeverityFlagBitsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessageSeverityFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessageSeverityFlagBitsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessageSeverityFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessageSeverityFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessageSeverityFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessageTypeFlagBitsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessageTypeFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessageTypeFlagBitsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessageTypeFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessageTypeFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessageTypeFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerCallbackDataEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessengerCallbackDataEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessengerCallbackDataEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerCallbackDataFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessengerCallbackDataFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessengerCallbackDataFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerCreateFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessengerCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessengerCreateFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessengerCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessengerCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsMessengerEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsMessengerEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsObjectNameInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsObjectNameInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsObjectNameInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsObjectTagInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDebugUtilsObjectTagInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsObjectTagInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDedicatedAllocationBufferCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDedicatedAllocationBufferCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDedicatedAllocationBufferCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDedicatedAllocationImageCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDedicatedAllocationImageCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDedicatedAllocationImageCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDedicatedAllocationMemoryAllocateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDedicatedAllocationMemoryAllocateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDependencyFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDependencyFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDependencyFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDependencyFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDependencyFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDependencyFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorBindingFlagBitsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorBindingFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorBindingFlagBitsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorBindingFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorBindingFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorBindingFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorBufferInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorBufferInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorBufferInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorImageInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorImageInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorImageInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPool {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPool @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorPoolCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPoolCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorPoolCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPoolCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorPoolCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPoolCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPoolInlineUniformBlockCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolResetFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorPoolResetFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPoolResetFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolSize {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorPoolSize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPoolSize @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSet {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSet @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetAllocateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetAllocateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayout {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayout @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutBinding {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetLayoutBinding {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayoutBinding @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayoutBindingFlagsCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetLayoutCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayoutCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetLayoutCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayoutCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetLayoutCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayoutCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutSupport {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetLayoutSupport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayoutSupport @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutSupportKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetLayoutSupportKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayoutSupportKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetVariableDescriptorCountAllocateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetVariableDescriptorCountLayoutSupportEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplate @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateCreateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateCreateFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateEntry {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateEntry @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateEntryKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateEntryKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateEntryKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateTypeKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateTypeKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorUpdateTemplateTypeKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDevice {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDevice @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceAddress {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceAddress @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceEventInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceEventInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceEventInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceEventTypeEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceEventTypeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceEventTypeEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGeneratedCommandsFeaturesNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGeneratedCommandsFeaturesNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGeneratedCommandsFeaturesNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGeneratedCommandsLimitsNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGeneratedCommandsLimitsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGeneratedCommandsLimitsNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupBindSparseInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupBindSparseInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupBindSparseInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupBindSparseInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupBindSparseInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupBindSparseInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupCommandBufferBeginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupCommandBufferBeginInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupCommandBufferBeginInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupCommandBufferBeginInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupCommandBufferBeginInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupDeviceCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupDeviceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupDeviceCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupDeviceCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupDeviceCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupDeviceCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupPresentCapabilitiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupPresentCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupPresentCapabilitiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupPresentInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupPresentInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupPresentInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupPresentModeFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupPresentModeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupPresentModeFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupPresentModeFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupPresentModeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupPresentModeFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupRenderPassBeginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupRenderPassBeginInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupRenderPassBeginInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupRenderPassBeginInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupRenderPassBeginInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupSubmitInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupSubmitInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupSubmitInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupSubmitInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupSubmitInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupSubmitInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceGroupSwapchainCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupSwapchainCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceMemory {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceMemory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceMemory @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceMemoryOverallocationCreateInfoAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceMemoryOverallocationCreateInfoAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceQueueCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceQueueCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceQueueCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceQueueCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceQueueCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceQueueCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueGlobalPriorityCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceQueueGlobalPriorityCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceQueueGlobalPriorityCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueInfo2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceQueueInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceQueueInfo2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDeviceSize {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDeviceSize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceSize @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDiscardRectangleModeEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDiscardRectangleModeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDiscardRectangleModeEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDispatchIndirectCommand {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDispatchIndirectCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDispatchIndirectCommand @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayEventInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayEventInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayEventInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayEventTypeEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayEventTypeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayEventTypeEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeCreateFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayModeCreateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayModeCreateFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayModeCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayModeCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayModeKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayModeKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeParametersKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayModeParametersKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayModeParametersKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayModeProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayModeProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModePropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayModePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayModePropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayNativeHdrSurfaceCapabilitiesAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneAlphaFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPlaneAlphaFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPlaneAlphaFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneAlphaFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPlaneAlphaFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPlaneAlphaFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneCapabilities2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPlaneCapabilities2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPlaneCapabilities2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneCapabilitiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPlaneCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPlaneCapabilitiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneInfo2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPlaneInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPlaneInfo2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPlaneProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPlaneProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlanePropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPlanePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPlanePropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPowerInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPowerInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPowerInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPowerStateEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPowerStateEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPowerStateEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPresentInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPresentInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPresentInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplayPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplaySurfaceCreateFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplaySurfaceCreateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplaySurfaceCreateFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDisplaySurfaceCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDisplaySurfaceCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplaySurfaceCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDrawIndexedIndirectCommand {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDrawIndexedIndirectCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDrawIndexedIndirectCommand @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDrawIndirectCommand {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDrawIndirectCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDrawIndirectCommand @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDrawMeshTasksIndirectCommandNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDrawMeshTasksIndirectCommandNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDrawMeshTasksIndirectCommandNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDriverIdKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDriverIdKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDriverIdKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDrmFormatModifierPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDrmFormatModifierPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDrmFormatModifierPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDrmFormatModifierPropertiesListEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDrmFormatModifierPropertiesListEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDrmFormatModifierPropertiesListEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkDynamicState {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkDynamicState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDynamicState @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkEvent {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkEvent @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkEventCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkEventCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkEventCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkEventCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkEventCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkEventCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExportFenceCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExportFenceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExportFenceCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExportFenceCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExportFenceCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExportFenceCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExportMemoryAllocateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExportMemoryAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExportMemoryAllocateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExportMemoryAllocateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExportMemoryAllocateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExportMemoryAllocateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExportMemoryAllocateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExportMemoryAllocateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExportMemoryAllocateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExportSemaphoreCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExportSemaphoreCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExportSemaphoreCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExportSemaphoreCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExportSemaphoreCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExportSemaphoreCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExtensionProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExtensionProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExtensionProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExtent2D {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExtent2D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExtent2D @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExtent3D {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExtent3D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExtent3D @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalBufferProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalBufferProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalBufferProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalBufferPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalBufferPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalBufferPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceFeatureFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceFeatureFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceFeatureFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceFeatureFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceFeatureFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceFeatureFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceFeatureFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceFeatureFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceFeatureFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceFeatureFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceHandleTypeFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceHandleTypeFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceHandleTypeFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceHandleTypeFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceHandleTypeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceHandleTypeFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceHandleTypeFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceHandleTypeFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceHandleTypeFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceHandleTypeFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceHandleTypeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceHandleTypeFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFenceProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFenceProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalFencePropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalFencePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalFencePropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalImageFormatProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalImageFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalImageFormatProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalImageFormatPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalImageFormatPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalImageFormatPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalImageFormatPropertiesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalImageFormatPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalImageFormatPropertiesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryBufferCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryBufferCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryBufferCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryBufferCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryBufferCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryBufferCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryFeatureFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryFeatureFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagBitsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryFeatureFlagBitsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryFeatureFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryFeatureFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryFeatureFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryHandleTypeFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryHandleTypeFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagBitsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryHandleTypeFlagBitsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryHandleTypeFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryHandleTypeFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryHandleTypeFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryImageCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryImageCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryImageCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryImageCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryImageCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryImageCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryImageCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryImageCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryImageCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalMemoryPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalMemoryPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreFeatureFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreFeatureFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreFeatureFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreFeatureFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreFeatureFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreFeatureFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreFeatureFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreFeatureFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreFeatureFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreFeatureFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreHandleTypeFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreHandleTypeFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreHandleTypeFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreHandleTypeFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreHandleTypeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreHandleTypeFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreHandleTypeFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreHandleTypeFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreHandleTypeFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreHandleTypeFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreHandleTypeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreHandleTypeFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphoreProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphoreProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphorePropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkExternalSemaphorePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExternalSemaphorePropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFence {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFence @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFenceCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFenceCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFenceCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFenceCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFenceCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFenceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFenceGetFdInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFenceGetFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceGetFdInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFenceImportFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFenceImportFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceImportFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFenceImportFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFenceImportFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceImportFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFenceImportFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFenceImportFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceImportFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFenceImportFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFenceImportFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceImportFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFilter {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFilter @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFilterCubicImageViewImageFormatPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFilterCubicImageViewImageFormatPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFormat {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFormat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormat @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFormatFeatureFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFormatFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatFeatureFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFormatFeatureFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFormatFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatFeatureFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFormatProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFormatProperties2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFormatProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatProperties2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFormatProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFormatProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFramebuffer {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFramebuffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFramebuffer @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFramebufferCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFramebufferCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFramebufferCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFramebufferCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFramebufferCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFramebufferCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFramebufferMixedSamplesCombinationNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFramebufferMixedSamplesCombinationNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFramebufferMixedSamplesCombinationNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkFrontFace {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkFrontFace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFrontFace @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryAABBNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryAABBNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryAABBNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryDataNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryDataNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryDataNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryFlagBitsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryFlagBitsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryInstanceFlagBitsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryInstanceFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryInstanceFlagBitsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryInstanceFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryInstanceFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryInstanceFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryTrianglesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryTrianglesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryTrianglesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGeometryTypeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGeometryTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryTypeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkGraphicsPipelineCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkGraphicsPipelineCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGraphicsPipelineCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkHdrMetadataEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkHdrMetadataEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkHdrMetadataEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkHeadlessSurfaceCreateFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkHeadlessSurfaceCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkHeadlessSurfaceCreateFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkHeadlessSurfaceCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkHeadlessSurfaceCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkHeadlessSurfaceCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImage {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImage @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageAspectFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageAspectFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageAspectFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageAspectFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageAspectFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageAspectFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageBlit {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageBlit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageBlit @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageCopy {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageCopy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageCopy @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageDrmFormatModifierExplicitCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageDrmFormatModifierExplicitCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageDrmFormatModifierListCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageDrmFormatModifierListCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageDrmFormatModifierPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageDrmFormatModifierPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageDrmFormatModifierPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageFormatListCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageFormatListCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageFormatListCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageFormatProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageFormatProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageFormatProperties2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageFormatProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageFormatProperties2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageFormatProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageFormatProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageFormatProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageLayout {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageLayout @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageMemoryBarrier {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageMemoryBarrier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageMemoryBarrier @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageMemoryRequirementsInfo2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageMemoryRequirementsInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageMemoryRequirementsInfo2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageMemoryRequirementsInfo2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageMemoryRequirementsInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageMemoryRequirementsInfo2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImagePlaneMemoryRequirementsInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImagePlaneMemoryRequirementsInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImagePlaneMemoryRequirementsInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImagePlaneMemoryRequirementsInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImagePlaneMemoryRequirementsInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageResolve {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageResolve {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageResolve @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageSparseMemoryRequirementsInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageSparseMemoryRequirementsInfo2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageSparseMemoryRequirementsInfo2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageSparseMemoryRequirementsInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageSparseMemoryRequirementsInfo2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageStencilUsageCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageStencilUsageCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageStencilUsageCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageSubresource {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageSubresource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageSubresource @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageSubresourceLayers {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageSubresourceLayers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageSubresourceLayers @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageSubresourceRange {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageSubresourceRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageSubresourceRange @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageSwapchainCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageSwapchainCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageSwapchainCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageTiling {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageTiling {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageTiling @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageUsageFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageUsageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageUsageFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageUsageFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageUsageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageUsageFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageView {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageView @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageViewASTCDecodeModeEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageViewASTCDecodeModeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewASTCDecodeModeEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageViewCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageViewCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageViewCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageViewCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageViewCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageViewCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageViewHandleInfoNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageViewHandleInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewHandleInfoNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageViewType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageViewType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageViewUsageCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageViewUsageCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewUsageCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImageViewUsageCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImageViewUsageCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewUsageCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImportFenceFdInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImportFenceFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImportFenceFdInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImportMemoryFdInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImportMemoryFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImportMemoryFdInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImportMemoryHostPointerInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImportMemoryHostPointerInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImportMemoryHostPointerInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkImportSemaphoreFdInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkImportSemaphoreFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImportSemaphoreFdInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkIndexType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkIndexType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndexType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutCreateInfoNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkIndirectCommandsLayoutCreateInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndirectCommandsLayoutCreateInfoNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkIndirectCommandsLayoutNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndirectCommandsLayoutNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutTokenNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkIndirectCommandsLayoutTokenNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndirectCommandsLayoutTokenNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutUsageFlagBitsNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkIndirectCommandsLayoutUsageFlagBitsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndirectCommandsLayoutUsageFlagBitsNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutUsageFlagsNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkIndirectCommandsLayoutUsageFlagsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndirectCommandsLayoutUsageFlagsNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsTokenNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkIndirectCommandsTokenNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndirectCommandsTokenNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsTokenTypeNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkIndirectCommandsTokenTypeNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndirectCommandsTokenTypeNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkInputAttachmentAspectReference {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkInputAttachmentAspectReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInputAttachmentAspectReference @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkInputAttachmentAspectReferenceKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkInputAttachmentAspectReferenceKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInputAttachmentAspectReferenceKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkInstance {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkInstance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInstance @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkInstanceCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkInstanceCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInstanceCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkInstanceCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkInstanceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInstanceCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkInternalAllocationType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkInternalAllocationType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInternalAllocationType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkLayerProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkLayerProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkLayerProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkLogicOp {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkLogicOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkLogicOp @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMappedMemoryRange {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMappedMemoryRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMappedMemoryRange @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryAllocateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryAllocateFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryAllocateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagsInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryAllocateFlagsInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateFlagsInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagsInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryAllocateFlagsInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateFlagsInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryAllocateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryBarrier {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryBarrier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryBarrier @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryDedicatedAllocateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryDedicatedAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryDedicatedAllocateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryDedicatedAllocateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryDedicatedAllocateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryDedicatedAllocateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryDedicatedRequirements {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryDedicatedRequirements {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryDedicatedRequirements @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryDedicatedRequirementsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryDedicatedRequirementsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryDedicatedRequirementsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryFdPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryFdPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryFdPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryGetFdInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryGetFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryGetFdInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryHeap {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryHeap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryHeap @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryHeapFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryHeapFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryHeapFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryHeapFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryHeapFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryHeapFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryHostPointerPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryHostPointerPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryHostPointerPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryMapFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryMapFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryMapFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryOverallocationBehaviorAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryOverallocationBehaviorAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryOverallocationBehaviorAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryPriorityAllocateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryPriorityAllocateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryPriorityAllocateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryPropertyFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryPropertyFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryPropertyFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryPropertyFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryPropertyFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryPropertyFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryRequirements {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryRequirements {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryRequirements @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryRequirements2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryRequirements2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryRequirements2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryRequirements2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryRequirements2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryRequirements2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMemoryType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMemoryType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkMultisamplePropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkMultisamplePropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMultisamplePropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectEntryTypeNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectEntryTypeNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectEntryTypeNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectEntryUsageFlagBitsNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectEntryUsageFlagBitsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectEntryUsageFlagBitsNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectEntryUsageFlagsNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectEntryUsageFlagsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectEntryUsageFlagsNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableCreateInfoNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectTableCreateInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTableCreateInfoNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableDescriptorSetEntryNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectTableDescriptorSetEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTableDescriptorSetEntryNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableEntryNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectTableEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTableEntryNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableIndexBufferEntryNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectTableIndexBufferEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTableIndexBufferEntryNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectTableNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTableNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectTablePipelineEntryNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectTablePipelineEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTablePipelineEntryNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectTablePushConstantEntryNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectTablePushConstantEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTablePushConstantEntryNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableVertexBufferEntryNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectTableVertexBufferEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTableVertexBufferEntryNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkObjectType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkObjectType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkOffset2D {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkOffset2D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkOffset2D @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkOffset3D {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkOffset3D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkOffset3D @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPastPresentationTimingGOOGLE {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPastPresentationTimingGOOGLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPastPresentationTimingGOOGLE @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPeerMemoryFeatureFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPeerMemoryFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPeerMemoryFeatureFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPeerMemoryFeatureFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPeerMemoryFeatureFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPeerMemoryFeatureFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPeerMemoryFeatureFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPeerMemoryFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPeerMemoryFeatureFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPeerMemoryFeatureFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPeerMemoryFeatureFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPeerMemoryFeatureFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevice {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevice @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDevice16BitStorageFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevice16BitStorageFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevice16BitStorageFeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDevice16BitStorageFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevice16BitStorageFeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevice8BitStorageFeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDevice8BitStorageFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevice8BitStorageFeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceASTCDecodeFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceASTCDecodeFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceBufferAddressFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceBufferAddressFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceBufferAddressFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceBufferDeviceAddressFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceComputeShaderDerivativesFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceConditionalRenderingFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceConservativeRasterizationPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceCooperativeMatrixFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceCooperativeMatrixPropertiesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceCornerSampledImageFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceCornerSampledImageFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceCoverageReductionModeFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceDepthClipEnableFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceDepthStencilResolvePropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceDescriptorIndexingFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceDescriptorIndexingPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceDiscardRectanglePropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDriverPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceDriverPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceDriverPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExclusiveScissorFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExclusiveScissorFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalBufferInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalBufferInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalBufferInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalBufferInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalBufferInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalFenceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalFenceInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalFenceInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalFenceInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalFenceInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalImageFormatInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalImageFormatInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalImageFormatInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalImageFormatInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalImageFormatInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalMemoryHostPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalSemaphoreInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalSemaphoreInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalSemaphoreInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceExternalSemaphoreInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceExternalSemaphoreInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFeatures2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceFeatures2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceFeatures2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFeatures2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceFeatures2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceFeatures2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFloat16Int8FeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceFloat16Int8FeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceFloat16Int8FeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFloatControlsPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceFloatControlsPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceFloatControlsPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceFragmentDensityMapFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceFragmentDensityMapPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceGroupProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceGroupProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceGroupProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceGroupPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceGroupPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceGroupPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceHostQueryResetFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceHostQueryResetFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceHostQueryResetFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceIDProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceIDProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceIDProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceIDPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceIDPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceIDPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceImageDrmFormatModifierInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceImageFormatInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceImageFormatInfo2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceImageFormatInfo2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceImageFormatInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceImageFormatInfo2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceImageViewImageFormatInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceImageViewImageFormatInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceInlineUniformBlockFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceInlineUniformBlockPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceLimits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceLimits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceLimits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMaintenance3Properties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMaintenance3Properties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMaintenance3PropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMaintenance3PropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMaintenance3PropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMemoryBudgetPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMemoryPriorityFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMemoryProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMemoryProperties2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMemoryProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMeshShaderFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMeshShaderFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMeshShaderPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMeshShaderPropertiesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMultiviewFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewFeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMultiviewFeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMultiviewProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceMultiviewPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDevicePCIBusInfoPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevicePCIBusInfoPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevicePointClippingProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDevicePointClippingProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevicePointClippingProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevicePointClippingPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDevicePointClippingPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevicePointClippingPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProperties2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceProperties2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceProtectedMemoryFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceProtectedMemoryFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceProtectedMemoryProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceProtectedMemoryProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDevicePushDescriptorPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevicePushDescriptorPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceRayTracingPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceRayTracingPropertiesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSampleLocationsPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSampleLocationsPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSamplerYcbcrConversionFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceScalarBlockLayoutFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceShaderAtomicInt64FeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceShaderCorePropertiesAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceShaderCorePropertiesAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderDrawParameterFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceShaderDrawParameterFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceShaderDrawParameterFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceShaderDrawParametersFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceShaderDrawParametersFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceShaderImageFootprintFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceShadingRateImageFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceShadingRateImageFeaturesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceShadingRateImagePropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceShadingRateImagePropertiesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSparseImageFormatInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSparseImageFormatInfo2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSparseImageFormatInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSparseImageFormatInfo2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSparseProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSparseProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSparseProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSubgroupProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSubgroupProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSubgroupProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceSurfaceInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceSurfaceInfo2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceTransformFeedbackFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceTransformFeedbackPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVariablePointerFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceVariablePointerFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceVariablePointerFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVariablePointerFeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceVariablePointerFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceVariablePointerFeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceVariablePointersFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceVariablePointersFeatures @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVariablePointersFeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceVariablePointersFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceVariablePointersFeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceVulkanMemoryModelFeaturesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceYcbcrImageArraysFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipeline {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipeline {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipeline @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineBindPoint {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineBindPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineBindPoint @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCache {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCache {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCache @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCacheCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCacheCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCacheCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCacheCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCacheCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCacheCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCacheHeaderVersion {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCacheHeaderVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCacheHeaderVersion @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineColorBlendAdvancedStateCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineColorBlendAttachmentState {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineColorBlendAttachmentState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineColorBlendAttachmentState @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineColorBlendStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineColorBlendStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineColorBlendStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineColorBlendStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineColorBlendStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineColorBlendStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageModulationStateCreateFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCoverageModulationStateCreateFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCoverageModulationStateCreateFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCoverageModulationStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCoverageModulationStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageReductionStateCreateFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCoverageReductionStateCreateFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCoverageReductionStateCreateFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCoverageReductionStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCoverageReductionStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageToColorStateCreateFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCoverageToColorStateCreateFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCoverageToColorStateCreateFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCoverageToColorStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCoverageToColorStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreationFeedbackCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCreationFeedbackCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCreationFeedbackCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreationFeedbackEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCreationFeedbackEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCreationFeedbackEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreationFeedbackFlagBitsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCreationFeedbackFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCreationFeedbackFlagBitsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreationFeedbackFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineCreationFeedbackFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCreationFeedbackFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDepthStencilStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineDepthStencilStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineDepthStencilStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineDepthStencilStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineDepthStencilStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDiscardRectangleStateCreateFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineDiscardRectangleStateCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineDiscardRectangleStateCreateFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineDiscardRectangleStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineDiscardRectangleStateCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDynamicStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineDynamicStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineDynamicStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDynamicStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineDynamicStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineDynamicStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineInputAssemblyStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineInputAssemblyStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineInputAssemblyStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineInputAssemblyStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineInputAssemblyStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineLayout {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineLayout @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineLayoutCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineLayoutCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineLayoutCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineLayoutCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineLayoutCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineLayoutCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineMultisampleStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineMultisampleStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineMultisampleStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineMultisampleStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineMultisampleStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineMultisampleStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationConservativeStateCreateFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationConservativeStateCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationConservativeStateCreateFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationConservativeStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationConservativeStateCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationDepthClipStateCreateFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationDepthClipStateCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationDepthClipStateCreateFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationDepthClipStateCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationStateRasterizationOrderAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationStateRasterizationOrderAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateStreamCreateFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationStateStreamCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationStateStreamCreateFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRasterizationStateStreamCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRasterizationStateStreamCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineRepresentativeFragmentTestStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineSampleLocationsStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineSampleLocationsStateCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineShaderStageCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineShaderStageCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineShaderStageCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineShaderStageCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineShaderStageCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineShaderStageCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineStageFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineStageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineStageFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineStageFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineStageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineStageFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineTessellationDomainOriginStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineTessellationDomainOriginStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineTessellationDomainOriginStateCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineTessellationDomainOriginStateCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineTessellationStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineTessellationStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineTessellationStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineTessellationStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineTessellationStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineTessellationStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineVertexInputDivisorStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineVertexInputDivisorStateCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineVertexInputStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineVertexInputStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineVertexInputStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineVertexInputStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineVertexInputStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineVertexInputStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineViewportCoarseSampleOrderStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineViewportExclusiveScissorStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineViewportShadingRateImageStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineViewportShadingRateImageStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportStateCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineViewportStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineViewportStateCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportStateCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineViewportStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineViewportStateCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportSwizzleStateCreateFlagsNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineViewportSwizzleStateCreateFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineViewportSwizzleStateCreateFlagsNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineViewportSwizzleStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineViewportSwizzleStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPipelineViewportWScalingStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineViewportWScalingStateCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPointClippingBehavior {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPointClippingBehavior {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPointClippingBehavior @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPointClippingBehaviorKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPointClippingBehaviorKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPointClippingBehaviorKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPolygonMode {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPolygonMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPolygonMode @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPresentInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPresentInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPresentModeKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPresentModeKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentModeKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPresentRegionKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPresentRegionKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentRegionKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPresentRegionsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPresentRegionsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentRegionsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPresentTimeGOOGLE {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPresentTimeGOOGLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentTimeGOOGLE @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPresentTimesInfoGOOGLE {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPresentTimesInfoGOOGLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentTimesInfoGOOGLE @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPrimitiveTopology {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPrimitiveTopology {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPrimitiveTopology @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkProtectedSubmitInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkProtectedSubmitInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkProtectedSubmitInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkPushConstantRange {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkPushConstantRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPushConstantRange @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryControlFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryControlFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryControlFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryControlFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryControlFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryControlFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryPipelineStatisticFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryPipelineStatisticFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryPipelineStatisticFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryPipelineStatisticFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryPipelineStatisticFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryPipelineStatisticFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryPool {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryPool @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryPoolCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryPoolCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryPoolCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryPoolCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryPoolCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryPoolCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryResultFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryResultFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryResultFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryResultFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryResultFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryResultFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueryType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueryType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueue {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueue @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueueFamilyCheckpointPropertiesNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueueFamilyCheckpointPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFamilyCheckpointPropertiesNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueueFamilyProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueueFamilyProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFamilyProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueueFamilyProperties2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueueFamilyProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFamilyProperties2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueueFamilyProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueueFamilyProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFamilyProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueueFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueueFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueueFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueueFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkQueueGlobalPriorityEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkQueueGlobalPriorityEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueGlobalPriorityEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRasterizationOrderAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRasterizationOrderAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRasterizationOrderAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRayTracingPipelineCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRayTracingPipelineCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRayTracingPipelineCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRayTracingShaderGroupCreateInfoNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRayTracingShaderGroupCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRayTracingShaderGroupCreateInfoNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRayTracingShaderGroupTypeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRayTracingShaderGroupTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRayTracingShaderGroupTypeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRect2D {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRect2D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRect2D @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRectLayerKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRectLayerKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRectLayerKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRefreshCycleDurationGOOGLE {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRefreshCycleDurationGOOGLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRefreshCycleDurationGOOGLE @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPass {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPass @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassBeginInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassBeginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassBeginInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassCreateInfo2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassCreateInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassCreateInfo2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassFragmentDensityMapCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassFragmentDensityMapCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassInputAttachmentAspectCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassInputAttachmentAspectCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassInputAttachmentAspectCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassInputAttachmentAspectCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassInputAttachmentAspectCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassMultiviewCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassMultiviewCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassMultiviewCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassMultiviewCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassMultiviewCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassMultiviewCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkRenderPassSampleLocationsBeginInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassSampleLocationsBeginInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkResolveModeFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkResolveModeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkResolveModeFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkResolveModeFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkResolveModeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkResolveModeFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkResult {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkResult @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSampleCountFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSampleCountFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleCountFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSampleCountFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSampleCountFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleCountFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSampleLocationEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSampleLocationEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleLocationEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSampleLocationsInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSampleLocationsInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleLocationsInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSampleMask {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSampleMask {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleMask @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSampler {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSampler {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampler @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerAddressMode {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerAddressMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerAddressMode @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerCreateFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerCreateFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerMipmapMode {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerMipmapMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerMipmapMode @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerReductionModeCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerReductionModeCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerReductionModeCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerReductionModeEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerReductionModeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerReductionModeEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversion {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrConversion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrConversion @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrConversionCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrConversionCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrConversionCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrConversionCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrConversionImageFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrConversionImageFormatProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionImageFormatPropertiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrConversionImageFormatPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrConversionImageFormatPropertiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrConversionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrConversionInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrConversionInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrConversionInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrConversionKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrConversionKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrModelConversion {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrModelConversion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrModelConversion @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrModelConversionKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrModelConversionKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrModelConversionKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrRange {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrRange @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrRangeKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSamplerYcbcrRangeKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrRangeKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkScopeNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkScopeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkScopeNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSemaphore {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSemaphore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphore @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSemaphoreCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSemaphoreCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreGetFdInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSemaphoreGetFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreGetFdInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreImportFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSemaphoreImportFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreImportFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreImportFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSemaphoreImportFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreImportFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreImportFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSemaphoreImportFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreImportFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreImportFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSemaphoreImportFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreImportFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderInfoTypeAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderInfoTypeAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderInfoTypeAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderModule {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderModule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderModule @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderModuleCreateFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderModuleCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderModuleCreateFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderModuleCreateInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderModuleCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderModuleCreateInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderModuleValidationCacheCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderModuleValidationCacheCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderResourceUsageAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderResourceUsageAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderResourceUsageAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderStageFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderStageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderStageFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderStageFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderStageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderStageFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShaderStatisticsInfoAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShaderStatisticsInfoAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderStatisticsInfoAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShadingRatePaletteEntryNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShadingRatePaletteEntryNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShadingRatePaletteEntryNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkShadingRatePaletteNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkShadingRatePaletteNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShadingRatePaletteNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSharedPresentSurfaceCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSharedPresentSurfaceCapabilitiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSharingMode {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSharingMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSharingMode @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseBufferMemoryBindInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseBufferMemoryBindInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseBufferMemoryBindInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageFormatFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageFormatFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageFormatFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageFormatFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatProperties {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageFormatProperties @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatProperties2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageFormatProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageFormatProperties2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatProperties2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageFormatProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageFormatProperties2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryBind {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageMemoryBind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageMemoryBind @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryBindInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageMemoryBindInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageMemoryBindInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryRequirements {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageMemoryRequirements {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageMemoryRequirements @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryRequirements2 {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageMemoryRequirements2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageMemoryRequirements2 @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryRequirements2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageMemoryRequirements2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageMemoryRequirements2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseImageOpaqueMemoryBindInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageOpaqueMemoryBindInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseMemoryBind {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseMemoryBind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseMemoryBind @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseMemoryBindFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseMemoryBindFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseMemoryBindFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSparseMemoryBindFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSparseMemoryBindFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseMemoryBindFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSpecializationInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSpecializationInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSpecializationInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSpecializationMapEntry {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSpecializationMapEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSpecializationMapEntry @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkStencilFaceFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkStencilFaceFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStencilFaceFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkStencilFaceFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkStencilFaceFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStencilFaceFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkStencilOp {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkStencilOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStencilOp @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkStencilOpState {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkStencilOpState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStencilOpState @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkStructureType {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkStructureType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStructureType @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubgroupFeatureFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubgroupFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubgroupFeatureFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubgroupFeatureFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubgroupFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubgroupFeatureFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubmitInfo {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubmitInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubmitInfo @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassBeginInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassBeginInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassBeginInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassContents {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassContents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassContents @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDependency {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassDependency {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDependency @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDependency2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassDependency2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDependency2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescription {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDescription @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescription2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassDescription2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDescription2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescriptionDepthStencilResolveKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassDescriptionDepthStencilResolveKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDescriptionDepthStencilResolveKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescriptionFlagBits {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassDescriptionFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDescriptionFlagBits @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescriptionFlags {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassDescriptionFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDescriptionFlags @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassEndInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassEndInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassEndInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubpassSampleLocationsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubpassSampleLocationsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassSampleLocationsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSubresourceLayout {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSubresourceLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubresourceLayout @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCapabilities2EXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceCapabilities2EXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceCapabilities2EXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCapabilities2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceCapabilities2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceCapabilities2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCapabilitiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceCapabilitiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCounterFlagBitsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceCounterFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceCounterFlagBitsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCounterFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceCounterFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceCounterFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceFormat2KHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceFormat2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceFormat2KHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceFormatKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceFormatKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceFormatKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceProtectedCapabilitiesKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceProtectedCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceProtectedCapabilitiesKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceTransformFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceTransformFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceTransformFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceTransformFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSurfaceTransformFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceTransformFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainCounterCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSwapchainCounterCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSwapchainCounterCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainCreateFlagBitsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSwapchainCreateFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSwapchainCreateFlagBitsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainCreateFlagsKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSwapchainCreateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSwapchainCreateFlagsKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainCreateInfoKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSwapchainCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSwapchainCreateInfoKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSwapchainDisplayNativeHdrCreateInfoAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSwapchainDisplayNativeHdrCreateInfoAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSwapchainKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSwapchainKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkSystemAllocationScope {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkSystemAllocationScope {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSystemAllocationScope @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkTessellationDomainOrigin {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkTessellationDomainOrigin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkTessellationDomainOrigin @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkTessellationDomainOriginKHR {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkTessellationDomainOriginKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkTessellationDomainOriginKHR @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkTextureLODGatherFormatPropertiesAMD {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkTextureLODGatherFormatPropertiesAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkTextureLODGatherFormatPropertiesAMD @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkTimeDomainEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkTimeDomainEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkTimeDomainEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationCacheCreateFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationCacheCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationCacheCreateFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationCacheCreateInfoEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationCacheCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationCacheCreateInfoEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationCacheEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationCacheEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationCacheEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationCacheHeaderVersionEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationCacheHeaderVersionEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationCacheHeaderVersionEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationCheckEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationCheckEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationCheckEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationFeatureDisableEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationFeatureDisableEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationFeatureDisableEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationFeatureEnableEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationFeatureEnableEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationFeatureEnableEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationFeaturesEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationFeaturesEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkValidationFlagsEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkValidationFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationFlagsEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkVendorId {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkVendorId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkVendorId @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkVertexInputAttributeDescription {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkVertexInputAttributeDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkVertexInputAttributeDescription @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkVertexInputBindingDescription {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkVertexInputBindingDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkVertexInputBindingDescription @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkVertexInputBindingDivisorDescriptionEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkVertexInputBindingDivisorDescriptionEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkVertexInputBindingDivisorDescriptionEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkVertexInputRate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkVertexInputRate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkVertexInputRate @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkViewport {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkViewport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkViewport @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkViewportCoordinateSwizzleNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkViewportCoordinateSwizzleNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkViewportCoordinateSwizzleNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkViewportSwizzleNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkViewportSwizzleNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkViewportSwizzleNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkViewportWScalingNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkViewportWScalingNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkViewportWScalingNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkWriteDescriptorSet {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkWriteDescriptorSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkWriteDescriptorSet @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkWriteDescriptorSetAccelerationStructureNV {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkWriteDescriptorSetAccelerationStructureNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkWriteDescriptorSetAccelerationStructureNV @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkWriteDescriptorSetInlineUniformBlockEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkWriteDescriptorSetInlineUniformBlockEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkWriteDescriptorSetInlineUniformBlockEXT @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct VkXYColorEXT {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for VkXYColorEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkXYColorEXT @ {:p}", self))
         .finish()
    }
}

extern "C" {

}
