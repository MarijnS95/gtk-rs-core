// Generated by gir (https://github.com/gtk-rs/gir @ a786c04)
// from gir-files (https://github.com/gtk-rs/gir-files @ 6088bb6+)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]

use glib_sys as glib;

#[allow(unused_imports)]
use libc::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
    intptr_t, size_t, ssize_t, time_t, uintptr_t, FILE,
};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Records
#[repr(C)]
pub struct VkAccelerationStructureCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkAccelerationStructureCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAccelerationStructureCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureInfoNV(c_void);

impl ::std::fmt::Debug for VkAccelerationStructureInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAccelerationStructureInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV(c_void);

impl ::std::fmt::Debug for VkAccelerationStructureMemoryRequirementsInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAccelerationStructureMemoryRequirementsInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureMemoryRequirementsTypeNV(c_void);

impl ::std::fmt::Debug for VkAccelerationStructureMemoryRequirementsTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAccelerationStructureMemoryRequirementsTypeNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureNV(c_void);

impl ::std::fmt::Debug for VkAccelerationStructureNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAccelerationStructureNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAccelerationStructureTypeNV(c_void);

impl ::std::fmt::Debug for VkAccelerationStructureTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAccelerationStructureTypeNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAccessFlagBits(c_void);

impl ::std::fmt::Debug for VkAccessFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccessFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkAccessFlags(c_void);

impl ::std::fmt::Debug for VkAccessFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAccessFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkAcquireNextImageInfoKHR(c_void);

impl ::std::fmt::Debug for VkAcquireNextImageInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAcquireNextImageInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAllocationCallbacks(c_void);

impl ::std::fmt::Debug for VkAllocationCallbacks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAllocationCallbacks @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkApplicationInfo(c_void);

impl ::std::fmt::Debug for VkApplicationInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkApplicationInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentDescription(c_void);

impl ::std::fmt::Debug for VkAttachmentDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentDescription @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentDescription2KHR(c_void);

impl ::std::fmt::Debug for VkAttachmentDescription2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAttachmentDescription2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentDescriptionFlagBits(c_void);

impl ::std::fmt::Debug for VkAttachmentDescriptionFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAttachmentDescriptionFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentDescriptionFlags(c_void);

impl ::std::fmt::Debug for VkAttachmentDescriptionFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAttachmentDescriptionFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentLoadOp(c_void);

impl ::std::fmt::Debug for VkAttachmentLoadOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentLoadOp @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentReference(c_void);

impl ::std::fmt::Debug for VkAttachmentReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentReference @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentReference2KHR(c_void);

impl ::std::fmt::Debug for VkAttachmentReference2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAttachmentReference2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentSampleLocationsEXT(c_void);

impl ::std::fmt::Debug for VkAttachmentSampleLocationsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkAttachmentSampleLocationsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkAttachmentStoreOp(c_void);

impl ::std::fmt::Debug for VkAttachmentStoreOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkAttachmentStoreOp @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBaseInStructure(c_void);

impl ::std::fmt::Debug for VkBaseInStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBaseInStructure @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBaseOutStructure(c_void);

impl ::std::fmt::Debug for VkBaseOutStructure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBaseOutStructure @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBindAccelerationStructureMemoryInfoNV(c_void);

impl ::std::fmt::Debug for VkBindAccelerationStructureMemoryInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindAccelerationStructureMemoryInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindBufferMemoryDeviceGroupInfo(c_void);

impl ::std::fmt::Debug for VkBindBufferMemoryDeviceGroupInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindBufferMemoryDeviceGroupInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindBufferMemoryDeviceGroupInfoKHR(c_void);

impl ::std::fmt::Debug for VkBindBufferMemoryDeviceGroupInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindBufferMemoryDeviceGroupInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindBufferMemoryInfo(c_void);

impl ::std::fmt::Debug for VkBindBufferMemoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindBufferMemoryInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBindBufferMemoryInfoKHR(c_void);

impl ::std::fmt::Debug for VkBindBufferMemoryInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindBufferMemoryInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemoryDeviceGroupInfo(c_void);

impl ::std::fmt::Debug for VkBindImageMemoryDeviceGroupInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindImageMemoryDeviceGroupInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemoryDeviceGroupInfoKHR(c_void);

impl ::std::fmt::Debug for VkBindImageMemoryDeviceGroupInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindImageMemoryDeviceGroupInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemoryInfo(c_void);

impl ::std::fmt::Debug for VkBindImageMemoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindImageMemoryInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemoryInfoKHR(c_void);

impl ::std::fmt::Debug for VkBindImageMemoryInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindImageMemoryInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindImageMemorySwapchainInfoKHR(c_void);

impl ::std::fmt::Debug for VkBindImageMemorySwapchainInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindImageMemorySwapchainInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindImagePlaneMemoryInfo(c_void);

impl ::std::fmt::Debug for VkBindImagePlaneMemoryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindImagePlaneMemoryInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindImagePlaneMemoryInfoKHR(c_void);

impl ::std::fmt::Debug for VkBindImagePlaneMemoryInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBindImagePlaneMemoryInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBindSparseInfo(c_void);

impl ::std::fmt::Debug for VkBindSparseInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBindSparseInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBlendFactor(c_void);

impl ::std::fmt::Debug for VkBlendFactor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBlendFactor @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBlendOp(c_void);

impl ::std::fmt::Debug for VkBlendOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBlendOp @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBlendOverlapEXT(c_void);

impl ::std::fmt::Debug for VkBlendOverlapEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBlendOverlapEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBool32(c_void);

impl ::std::fmt::Debug for VkBool32 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBool32 @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBorderColor(c_void);

impl ::std::fmt::Debug for VkBorderColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBorderColor @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBuffer(c_void);

impl ::std::fmt::Debug for VkBuffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBuffer @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferCopy(c_void);

impl ::std::fmt::Debug for VkBufferCopy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferCopy @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkBufferCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferCreateFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferCreateFlags(c_void);

impl ::std::fmt::Debug for VkBufferCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferCreateInfo(c_void);

impl ::std::fmt::Debug for VkBufferCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferDeviceAddressCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkBufferDeviceAddressCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBufferDeviceAddressCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBufferDeviceAddressInfoEXT(c_void);

impl ::std::fmt::Debug for VkBufferDeviceAddressInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBufferDeviceAddressInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBufferImageCopy(c_void);

impl ::std::fmt::Debug for VkBufferImageCopy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferImageCopy @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferMemoryBarrier(c_void);

impl ::std::fmt::Debug for VkBufferMemoryBarrier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferMemoryBarrier @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferMemoryRequirementsInfo2(c_void);

impl ::std::fmt::Debug for VkBufferMemoryRequirementsInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBufferMemoryRequirementsInfo2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBufferMemoryRequirementsInfo2KHR(c_void);

impl ::std::fmt::Debug for VkBufferMemoryRequirementsInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBufferMemoryRequirementsInfo2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBufferUsageFlagBits(c_void);

impl ::std::fmt::Debug for VkBufferUsageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferUsageFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferUsageFlags(c_void);

impl ::std::fmt::Debug for VkBufferUsageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferUsageFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferView(c_void);

impl ::std::fmt::Debug for VkBufferView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferView @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferViewCreateFlags(c_void);

impl ::std::fmt::Debug for VkBufferViewCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferViewCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBufferViewCreateInfo(c_void);

impl ::std::fmt::Debug for VkBufferViewCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkBufferViewCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkBuildAccelerationStructureFlagBitsNV(c_void);

impl ::std::fmt::Debug for VkBuildAccelerationStructureFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBuildAccelerationStructureFlagBitsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkBuildAccelerationStructureFlagsNV(c_void);

impl ::std::fmt::Debug for VkBuildAccelerationStructureFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkBuildAccelerationStructureFlagsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCalibratedTimestampInfoEXT(c_void);

impl ::std::fmt::Debug for VkCalibratedTimestampInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCalibratedTimestampInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCheckpointDataNV(c_void);

impl ::std::fmt::Debug for VkCheckpointDataNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCheckpointDataNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkChromaLocation(c_void);

impl ::std::fmt::Debug for VkChromaLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkChromaLocation @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkChromaLocationKHR(c_void);

impl ::std::fmt::Debug for VkChromaLocationKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkChromaLocationKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkClearAttachment(c_void);

impl ::std::fmt::Debug for VkClearAttachment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearAttachment @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkClearColorValue(c_void);

impl ::std::fmt::Debug for VkClearColorValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearColorValue @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkClearDepthStencilValue(c_void);

impl ::std::fmt::Debug for VkClearDepthStencilValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkClearDepthStencilValue @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkClearRect(c_void);

impl ::std::fmt::Debug for VkClearRect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearRect @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkClearValue(c_void);

impl ::std::fmt::Debug for VkClearValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkClearValue @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCmdProcessCommandsInfoNVX(c_void);

impl ::std::fmt::Debug for VkCmdProcessCommandsInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCmdProcessCommandsInfoNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCmdReserveSpaceForCommandsInfoNVX(c_void);

impl ::std::fmt::Debug for VkCmdReserveSpaceForCommandsInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCmdReserveSpaceForCommandsInfoNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCoarseSampleLocationNV(c_void);

impl ::std::fmt::Debug for VkCoarseSampleLocationNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCoarseSampleLocationNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCoarseSampleOrderCustomNV(c_void);

impl ::std::fmt::Debug for VkCoarseSampleOrderCustomNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCoarseSampleOrderCustomNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCoarseSampleOrderTypeNV(c_void);

impl ::std::fmt::Debug for VkCoarseSampleOrderTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCoarseSampleOrderTypeNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkColorComponentFlagBits(c_void);

impl ::std::fmt::Debug for VkColorComponentFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkColorComponentFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkColorComponentFlags(c_void);

impl ::std::fmt::Debug for VkColorComponentFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkColorComponentFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkColorSpaceKHR(c_void);

impl ::std::fmt::Debug for VkColorSpaceKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkColorSpaceKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCommandBuffer(c_void);

impl ::std::fmt::Debug for VkCommandBuffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBuffer @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferAllocateInfo(c_void);

impl ::std::fmt::Debug for VkCommandBufferAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandBufferAllocateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferBeginInfo(c_void);

impl ::std::fmt::Debug for VkCommandBufferBeginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandBufferBeginInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT(c_void);

impl ::std::fmt::Debug for VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandBufferInheritanceConditionalRenderingInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferInheritanceInfo(c_void);

impl ::std::fmt::Debug for VkCommandBufferInheritanceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandBufferInheritanceInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferLevel(c_void);

impl ::std::fmt::Debug for VkCommandBufferLevel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandBufferLevel @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferResetFlagBits(c_void);

impl ::std::fmt::Debug for VkCommandBufferResetFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandBufferResetFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferResetFlags(c_void);

impl ::std::fmt::Debug for VkCommandBufferResetFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandBufferResetFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferUsageFlagBits(c_void);

impl ::std::fmt::Debug for VkCommandBufferUsageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandBufferUsageFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandBufferUsageFlags(c_void);

impl ::std::fmt::Debug for VkCommandBufferUsageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandBufferUsageFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandPool(c_void);

impl ::std::fmt::Debug for VkCommandPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPool @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkCommandPoolCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandPoolCreateFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolCreateFlags(c_void);

impl ::std::fmt::Debug for VkCommandPoolCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandPoolCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolCreateInfo(c_void);

impl ::std::fmt::Debug for VkCommandPoolCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolResetFlagBits(c_void);

impl ::std::fmt::Debug for VkCommandPoolResetFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandPoolResetFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolResetFlags(c_void);

impl ::std::fmt::Debug for VkCommandPoolResetFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolResetFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolTrimFlags(c_void);

impl ::std::fmt::Debug for VkCommandPoolTrimFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCommandPoolTrimFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCommandPoolTrimFlagsKHR(c_void);

impl ::std::fmt::Debug for VkCommandPoolTrimFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCommandPoolTrimFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCompareOp(c_void);

impl ::std::fmt::Debug for VkCompareOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCompareOp @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkComponentMapping(c_void);

impl ::std::fmt::Debug for VkComponentMapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkComponentMapping @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkComponentSwizzle(c_void);

impl ::std::fmt::Debug for VkComponentSwizzle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkComponentSwizzle @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkComponentTypeNV(c_void);

impl ::std::fmt::Debug for VkComponentTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkComponentTypeNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCompositeAlphaFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkCompositeAlphaFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCompositeAlphaFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCompositeAlphaFlagsKHR(c_void);

impl ::std::fmt::Debug for VkCompositeAlphaFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCompositeAlphaFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkComputePipelineCreateInfo(c_void);

impl ::std::fmt::Debug for VkComputePipelineCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkComputePipelineCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkConditionalRenderingBeginInfoEXT(c_void);

impl ::std::fmt::Debug for VkConditionalRenderingBeginInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkConditionalRenderingBeginInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkConditionalRenderingFlagBitsEXT(c_void);

impl ::std::fmt::Debug for VkConditionalRenderingFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkConditionalRenderingFlagBitsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkConditionalRenderingFlagsEXT(c_void);

impl ::std::fmt::Debug for VkConditionalRenderingFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkConditionalRenderingFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkConformanceVersionKHR(c_void);

impl ::std::fmt::Debug for VkConformanceVersionKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkConformanceVersionKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkConservativeRasterizationModeEXT(c_void);

impl ::std::fmt::Debug for VkConservativeRasterizationModeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkConservativeRasterizationModeEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCooperativeMatrixPropertiesNV(c_void);

impl ::std::fmt::Debug for VkCooperativeMatrixPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCooperativeMatrixPropertiesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCopyAccelerationStructureModeNV(c_void);

impl ::std::fmt::Debug for VkCopyAccelerationStructureModeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCopyAccelerationStructureModeNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCopyDescriptorSet(c_void);

impl ::std::fmt::Debug for VkCopyDescriptorSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCopyDescriptorSet @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCoverageModulationModeNV(c_void);

impl ::std::fmt::Debug for VkCoverageModulationModeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCoverageModulationModeNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCoverageReductionModeNV(c_void);

impl ::std::fmt::Debug for VkCoverageReductionModeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkCoverageReductionModeNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkCullModeFlagBits(c_void);

impl ::std::fmt::Debug for VkCullModeFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCullModeFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkCullModeFlags(c_void);

impl ::std::fmt::Debug for VkCullModeFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkCullModeFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDebugMarkerMarkerInfoEXT(c_void);

impl ::std::fmt::Debug for VkDebugMarkerMarkerInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugMarkerMarkerInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugMarkerObjectNameInfoEXT(c_void);

impl ::std::fmt::Debug for VkDebugMarkerObjectNameInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugMarkerObjectNameInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugMarkerObjectTagInfoEXT(c_void);

impl ::std::fmt::Debug for VkDebugMarkerObjectTagInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugMarkerObjectTagInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportCallbackCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkDebugReportCallbackCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugReportCallbackCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportCallbackEXT(c_void);

impl ::std::fmt::Debug for VkDebugReportCallbackEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugReportCallbackEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportFlagBitsEXT(c_void);

impl ::std::fmt::Debug for VkDebugReportFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugReportFlagBitsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportFlagsEXT(c_void);

impl ::std::fmt::Debug for VkDebugReportFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugReportFlagsEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDebugReportObjectTypeEXT(c_void);

impl ::std::fmt::Debug for VkDebugReportObjectTypeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugReportObjectTypeEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsLabelEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsLabelEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDebugUtilsLabelEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessageSeverityFlagBitsEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessageSeverityFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessageSeverityFlagBitsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessageSeverityFlagsEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessageSeverityFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessageSeverityFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessageTypeFlagBitsEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessageTypeFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessageTypeFlagBitsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessageTypeFlagsEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessageTypeFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessageTypeFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerCallbackDataEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessengerCallbackDataEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessengerCallbackDataEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerCallbackDataFlagsEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessengerCallbackDataFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessengerCallbackDataFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerCreateFlagsEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessengerCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessengerCreateFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessengerCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessengerCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsMessengerEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsMessengerEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsMessengerEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsObjectNameInfoEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsObjectNameInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsObjectNameInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDebugUtilsObjectTagInfoEXT(c_void);

impl ::std::fmt::Debug for VkDebugUtilsObjectTagInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDebugUtilsObjectTagInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDedicatedAllocationBufferCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkDedicatedAllocationBufferCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDedicatedAllocationBufferCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDedicatedAllocationImageCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkDedicatedAllocationImageCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDedicatedAllocationImageCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV(c_void);

impl ::std::fmt::Debug for VkDedicatedAllocationMemoryAllocateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDedicatedAllocationMemoryAllocateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDependencyFlagBits(c_void);

impl ::std::fmt::Debug for VkDependencyFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDependencyFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDependencyFlags(c_void);

impl ::std::fmt::Debug for VkDependencyFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDependencyFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorBindingFlagBitsEXT(c_void);

impl ::std::fmt::Debug for VkDescriptorBindingFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorBindingFlagBitsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorBindingFlagsEXT(c_void);

impl ::std::fmt::Debug for VkDescriptorBindingFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorBindingFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorBufferInfo(c_void);

impl ::std::fmt::Debug for VkDescriptorBufferInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorBufferInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorImageInfo(c_void);

impl ::std::fmt::Debug for VkDescriptorImageInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorImageInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPool(c_void);

impl ::std::fmt::Debug for VkDescriptorPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPool @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkDescriptorPoolCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorPoolCreateFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolCreateFlags(c_void);

impl ::std::fmt::Debug for VkDescriptorPoolCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorPoolCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolCreateInfo(c_void);

impl ::std::fmt::Debug for VkDescriptorPoolCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorPoolCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkDescriptorPoolInlineUniformBlockCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorPoolInlineUniformBlockCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolResetFlags(c_void);

impl ::std::fmt::Debug for VkDescriptorPoolResetFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorPoolResetFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorPoolSize(c_void);

impl ::std::fmt::Debug for VkDescriptorPoolSize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorPoolSize @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSet(c_void);

impl ::std::fmt::Debug for VkDescriptorSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSet @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetAllocateInfo(c_void);

impl ::std::fmt::Debug for VkDescriptorSetAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetAllocateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayout(c_void);

impl ::std::fmt::Debug for VkDescriptorSetLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorSetLayout @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutBinding(c_void);

impl ::std::fmt::Debug for VkDescriptorSetLayoutBinding {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetLayoutBinding @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkDescriptorSetLayoutBindingFlagsCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkDescriptorSetLayoutCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetLayoutCreateFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutCreateFlags(c_void);

impl ::std::fmt::Debug for VkDescriptorSetLayoutCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetLayoutCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutCreateInfo(c_void);

impl ::std::fmt::Debug for VkDescriptorSetLayoutCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetLayoutCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutSupport(c_void);

impl ::std::fmt::Debug for VkDescriptorSetLayoutSupport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetLayoutSupport @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetLayoutSupportKHR(c_void);

impl ::std::fmt::Debug for VkDescriptorSetLayoutSupportKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetLayoutSupportKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(c_void);

impl ::std::fmt::Debug for VkDescriptorSetVariableDescriptorCountAllocateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(c_void);

impl ::std::fmt::Debug for VkDescriptorSetVariableDescriptorCountLayoutSupportEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorType(c_void);

impl ::std::fmt::Debug for VkDescriptorType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDescriptorType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplate(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplate @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateFlags(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateFlagsKHR(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateCreateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateCreateFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateInfo(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateEntry(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateEntry @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateEntryKHR(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateEntryKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateEntryKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateKHR(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateType(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateType @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDescriptorUpdateTemplateTypeKHR(c_void);

impl ::std::fmt::Debug for VkDescriptorUpdateTemplateTypeKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDescriptorUpdateTemplateTypeKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDevice(c_void);

impl ::std::fmt::Debug for VkDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDevice @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceAddress(c_void);

impl ::std::fmt::Debug for VkDeviceAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceAddress @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceCreateFlags(c_void);

impl ::std::fmt::Debug for VkDeviceCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceCreateInfo(c_void);

impl ::std::fmt::Debug for VkDeviceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceEventInfoEXT(c_void);

impl ::std::fmt::Debug for VkDeviceEventInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceEventInfoEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceEventTypeEXT(c_void);

impl ::std::fmt::Debug for VkDeviceEventTypeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceEventTypeEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGeneratedCommandsFeaturesNVX(c_void);

impl ::std::fmt::Debug for VkDeviceGeneratedCommandsFeaturesNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGeneratedCommandsFeaturesNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGeneratedCommandsLimitsNVX(c_void);

impl ::std::fmt::Debug for VkDeviceGeneratedCommandsLimitsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGeneratedCommandsLimitsNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupBindSparseInfo(c_void);

impl ::std::fmt::Debug for VkDeviceGroupBindSparseInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupBindSparseInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupBindSparseInfoKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupBindSparseInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupBindSparseInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupCommandBufferBeginInfo(c_void);

impl ::std::fmt::Debug for VkDeviceGroupCommandBufferBeginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupCommandBufferBeginInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupCommandBufferBeginInfoKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupCommandBufferBeginInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupCommandBufferBeginInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupDeviceCreateInfo(c_void);

impl ::std::fmt::Debug for VkDeviceGroupDeviceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupDeviceCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupDeviceCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupDeviceCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupDeviceCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupPresentCapabilitiesKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupPresentCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupPresentCapabilitiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupPresentInfoKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupPresentInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupPresentInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupPresentModeFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupPresentModeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupPresentModeFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupPresentModeFlagsKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupPresentModeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupPresentModeFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupRenderPassBeginInfo(c_void);

impl ::std::fmt::Debug for VkDeviceGroupRenderPassBeginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupRenderPassBeginInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupRenderPassBeginInfoKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupRenderPassBeginInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupRenderPassBeginInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupSubmitInfo(c_void);

impl ::std::fmt::Debug for VkDeviceGroupSubmitInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceGroupSubmitInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupSubmitInfoKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupSubmitInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupSubmitInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkDeviceGroupSwapchainCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceGroupSwapchainCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceMemory(c_void);

impl ::std::fmt::Debug for VkDeviceMemory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceMemory @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD(c_void);

impl ::std::fmt::Debug for VkDeviceMemoryOverallocationCreateInfoAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceMemoryOverallocationCreateInfoAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkDeviceQueueCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceQueueCreateFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueCreateFlags(c_void);

impl ::std::fmt::Debug for VkDeviceQueueCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceQueueCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueCreateInfo(c_void);

impl ::std::fmt::Debug for VkDeviceQueueCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceQueueCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueGlobalPriorityCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkDeviceQueueGlobalPriorityCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDeviceQueueGlobalPriorityCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDeviceQueueInfo2(c_void);

impl ::std::fmt::Debug for VkDeviceQueueInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceQueueInfo2 @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDeviceSize(c_void);

impl ::std::fmt::Debug for VkDeviceSize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDeviceSize @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDiscardRectangleModeEXT(c_void);

impl ::std::fmt::Debug for VkDiscardRectangleModeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDiscardRectangleModeEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDispatchIndirectCommand(c_void);

impl ::std::fmt::Debug for VkDispatchIndirectCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDispatchIndirectCommand @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayEventInfoEXT(c_void);

impl ::std::fmt::Debug for VkDisplayEventInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayEventInfoEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayEventTypeEXT(c_void);

impl ::std::fmt::Debug for VkDisplayEventTypeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayEventTypeEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayKHR(c_void);

impl ::std::fmt::Debug for VkDisplayKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeCreateFlagsKHR(c_void);

impl ::std::fmt::Debug for VkDisplayModeCreateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayModeCreateFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkDisplayModeCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayModeCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeKHR(c_void);

impl ::std::fmt::Debug for VkDisplayModeKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayModeKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeParametersKHR(c_void);

impl ::std::fmt::Debug for VkDisplayModeParametersKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayModeParametersKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModeProperties2KHR(c_void);

impl ::std::fmt::Debug for VkDisplayModeProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayModeProperties2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayModePropertiesKHR(c_void);

impl ::std::fmt::Debug for VkDisplayModePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayModePropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD(c_void);

impl ::std::fmt::Debug for VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayNativeHdrSurfaceCapabilitiesAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneAlphaFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkDisplayPlaneAlphaFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayPlaneAlphaFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneAlphaFlagsKHR(c_void);

impl ::std::fmt::Debug for VkDisplayPlaneAlphaFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayPlaneAlphaFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneCapabilities2KHR(c_void);

impl ::std::fmt::Debug for VkDisplayPlaneCapabilities2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayPlaneCapabilities2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneCapabilitiesKHR(c_void);

impl ::std::fmt::Debug for VkDisplayPlaneCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayPlaneCapabilitiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneInfo2KHR(c_void);

impl ::std::fmt::Debug for VkDisplayPlaneInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPlaneInfo2KHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlaneProperties2KHR(c_void);

impl ::std::fmt::Debug for VkDisplayPlaneProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayPlaneProperties2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPlanePropertiesKHR(c_void);

impl ::std::fmt::Debug for VkDisplayPlanePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplayPlanePropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPowerInfoEXT(c_void);

impl ::std::fmt::Debug for VkDisplayPowerInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPowerInfoEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPowerStateEXT(c_void);

impl ::std::fmt::Debug for VkDisplayPowerStateEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPowerStateEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPresentInfoKHR(c_void);

impl ::std::fmt::Debug for VkDisplayPresentInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPresentInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayProperties2KHR(c_void);

impl ::std::fmt::Debug for VkDisplayProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayProperties2KHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplayPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkDisplayPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDisplayPropertiesKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDisplaySurfaceCreateFlagsKHR(c_void);

impl ::std::fmt::Debug for VkDisplaySurfaceCreateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplaySurfaceCreateFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDisplaySurfaceCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkDisplaySurfaceCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDisplaySurfaceCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDrawIndexedIndirectCommand(c_void);

impl ::std::fmt::Debug for VkDrawIndexedIndirectCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDrawIndexedIndirectCommand @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDrawIndirectCommand(c_void);

impl ::std::fmt::Debug for VkDrawIndirectCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDrawIndirectCommand @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDrawMeshTasksIndirectCommandNV(c_void);

impl ::std::fmt::Debug for VkDrawMeshTasksIndirectCommandNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDrawMeshTasksIndirectCommandNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDriverIdKHR(c_void);

impl ::std::fmt::Debug for VkDriverIdKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDriverIdKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkDrmFormatModifierPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkDrmFormatModifierPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDrmFormatModifierPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDrmFormatModifierPropertiesListEXT(c_void);

impl ::std::fmt::Debug for VkDrmFormatModifierPropertiesListEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkDrmFormatModifierPropertiesListEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkDynamicState(c_void);

impl ::std::fmt::Debug for VkDynamicState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkDynamicState @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkEvent(c_void);

impl ::std::fmt::Debug for VkEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkEvent @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkEventCreateFlags(c_void);

impl ::std::fmt::Debug for VkEventCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkEventCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkEventCreateInfo(c_void);

impl ::std::fmt::Debug for VkEventCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkEventCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkExportFenceCreateInfo(c_void);

impl ::std::fmt::Debug for VkExportFenceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExportFenceCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkExportFenceCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkExportFenceCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExportFenceCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExportMemoryAllocateInfo(c_void);

impl ::std::fmt::Debug for VkExportMemoryAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExportMemoryAllocateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExportMemoryAllocateInfoKHR(c_void);

impl ::std::fmt::Debug for VkExportMemoryAllocateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExportMemoryAllocateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExportMemoryAllocateInfoNV(c_void);

impl ::std::fmt::Debug for VkExportMemoryAllocateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExportMemoryAllocateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExportSemaphoreCreateInfo(c_void);

impl ::std::fmt::Debug for VkExportSemaphoreCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExportSemaphoreCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExportSemaphoreCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkExportSemaphoreCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExportSemaphoreCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExtensionProperties(c_void);

impl ::std::fmt::Debug for VkExtensionProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExtensionProperties @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkExtent2D(c_void);

impl ::std::fmt::Debug for VkExtent2D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExtent2D @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkExtent3D(c_void);

impl ::std::fmt::Debug for VkExtent3D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkExtent3D @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkExternalBufferProperties(c_void);

impl ::std::fmt::Debug for VkExternalBufferProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalBufferProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalBufferPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkExternalBufferPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalBufferPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceFeatureFlagBits(c_void);

impl ::std::fmt::Debug for VkExternalFenceFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceFeatureFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceFeatureFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkExternalFenceFeatureFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceFeatureFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceFeatureFlags(c_void);

impl ::std::fmt::Debug for VkExternalFenceFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceFeatureFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceFeatureFlagsKHR(c_void);

impl ::std::fmt::Debug for VkExternalFenceFeatureFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceFeatureFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceHandleTypeFlagBits(c_void);

impl ::std::fmt::Debug for VkExternalFenceHandleTypeFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceHandleTypeFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceHandleTypeFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkExternalFenceHandleTypeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceHandleTypeFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceHandleTypeFlags(c_void);

impl ::std::fmt::Debug for VkExternalFenceHandleTypeFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceHandleTypeFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceHandleTypeFlagsKHR(c_void);

impl ::std::fmt::Debug for VkExternalFenceHandleTypeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceHandleTypeFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFenceProperties(c_void);

impl ::std::fmt::Debug for VkExternalFenceProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFenceProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalFencePropertiesKHR(c_void);

impl ::std::fmt::Debug for VkExternalFencePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalFencePropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalImageFormatProperties(c_void);

impl ::std::fmt::Debug for VkExternalImageFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalImageFormatProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalImageFormatPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkExternalImageFormatPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalImageFormatPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalImageFormatPropertiesNV(c_void);

impl ::std::fmt::Debug for VkExternalImageFormatPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalImageFormatPropertiesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryBufferCreateInfo(c_void);

impl ::std::fmt::Debug for VkExternalMemoryBufferCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryBufferCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryBufferCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkExternalMemoryBufferCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryBufferCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagBits(c_void);

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryFeatureFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryFeatureFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagBitsNV(c_void);

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryFeatureFlagBitsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlags(c_void);

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryFeatureFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagsKHR(c_void);

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryFeatureFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryFeatureFlagsNV(c_void);

impl ::std::fmt::Debug for VkExternalMemoryFeatureFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryFeatureFlagsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagBits(c_void);

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryHandleTypeFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryHandleTypeFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagBitsNV(c_void);

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryHandleTypeFlagBitsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlags(c_void);

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryHandleTypeFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagsKHR(c_void);

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryHandleTypeFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryHandleTypeFlagsNV(c_void);

impl ::std::fmt::Debug for VkExternalMemoryHandleTypeFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryHandleTypeFlagsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryImageCreateInfo(c_void);

impl ::std::fmt::Debug for VkExternalMemoryImageCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryImageCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryImageCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkExternalMemoryImageCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryImageCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryImageCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkExternalMemoryImageCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryImageCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryProperties(c_void);

impl ::std::fmt::Debug for VkExternalMemoryProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalMemoryPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkExternalMemoryPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalMemoryPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreFeatureFlagBits(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreFeatureFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreFeatureFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreFeatureFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreFeatureFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreFeatureFlags(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreFeatureFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreFeatureFlagsKHR(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreFeatureFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreFeatureFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreHandleTypeFlagBits(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreHandleTypeFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreHandleTypeFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreHandleTypeFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreHandleTypeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreHandleTypeFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreHandleTypeFlags(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreHandleTypeFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreHandleTypeFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreHandleTypeFlagsKHR(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreHandleTypeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreHandleTypeFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphoreProperties(c_void);

impl ::std::fmt::Debug for VkExternalSemaphoreProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphoreProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkExternalSemaphorePropertiesKHR(c_void);

impl ::std::fmt::Debug for VkExternalSemaphorePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkExternalSemaphorePropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkFence(c_void);

impl ::std::fmt::Debug for VkFence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFence @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFenceCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkFenceCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceCreateFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFenceCreateFlags(c_void);

impl ::std::fmt::Debug for VkFenceCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFenceCreateInfo(c_void);

impl ::std::fmt::Debug for VkFenceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFenceGetFdInfoKHR(c_void);

impl ::std::fmt::Debug for VkFenceGetFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceGetFdInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFenceImportFlagBits(c_void);

impl ::std::fmt::Debug for VkFenceImportFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceImportFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFenceImportFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkFenceImportFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkFenceImportFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkFenceImportFlags(c_void);

impl ::std::fmt::Debug for VkFenceImportFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceImportFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFenceImportFlagsKHR(c_void);

impl ::std::fmt::Debug for VkFenceImportFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFenceImportFlagsKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFilter(c_void);

impl ::std::fmt::Debug for VkFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFilter @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkFilterCubicImageViewImageFormatPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkFilterCubicImageViewImageFormatPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkFlags(c_void);

impl ::std::fmt::Debug for VkFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFormat(c_void);

impl ::std::fmt::Debug for VkFormat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormat @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFormatFeatureFlagBits(c_void);

impl ::std::fmt::Debug for VkFormatFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatFeatureFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFormatFeatureFlags(c_void);

impl ::std::fmt::Debug for VkFormatFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatFeatureFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFormatProperties(c_void);

impl ::std::fmt::Debug for VkFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatProperties @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFormatProperties2(c_void);

impl ::std::fmt::Debug for VkFormatProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatProperties2 @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFormatProperties2KHR(c_void);

impl ::std::fmt::Debug for VkFormatProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFormatProperties2KHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFramebuffer(c_void);

impl ::std::fmt::Debug for VkFramebuffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFramebuffer @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFramebufferCreateFlags(c_void);

impl ::std::fmt::Debug for VkFramebufferCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkFramebufferCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkFramebufferCreateInfo(c_void);

impl ::std::fmt::Debug for VkFramebufferCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFramebufferCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkFramebufferMixedSamplesCombinationNV(c_void);

impl ::std::fmt::Debug for VkFramebufferMixedSamplesCombinationNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkFramebufferMixedSamplesCombinationNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkFrontFace(c_void);

impl ::std::fmt::Debug for VkFrontFace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkFrontFace @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkGeometryAABBNV(c_void);

impl ::std::fmt::Debug for VkGeometryAABBNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryAABBNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkGeometryDataNV(c_void);

impl ::std::fmt::Debug for VkGeometryDataNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryDataNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkGeometryFlagBitsNV(c_void);

impl ::std::fmt::Debug for VkGeometryFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryFlagBitsNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkGeometryFlagsNV(c_void);

impl ::std::fmt::Debug for VkGeometryFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryFlagsNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkGeometryInstanceFlagBitsNV(c_void);

impl ::std::fmt::Debug for VkGeometryInstanceFlagBitsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkGeometryInstanceFlagBitsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkGeometryInstanceFlagsNV(c_void);

impl ::std::fmt::Debug for VkGeometryInstanceFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkGeometryInstanceFlagsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkGeometryNV(c_void);

impl ::std::fmt::Debug for VkGeometryNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkGeometryTrianglesNV(c_void);

impl ::std::fmt::Debug for VkGeometryTrianglesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryTrianglesNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkGeometryTypeNV(c_void);

impl ::std::fmt::Debug for VkGeometryTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkGeometryTypeNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkGraphicsPipelineCreateInfo(c_void);

impl ::std::fmt::Debug for VkGraphicsPipelineCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkGraphicsPipelineCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkHdrMetadataEXT(c_void);

impl ::std::fmt::Debug for VkHdrMetadataEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkHdrMetadataEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkHeadlessSurfaceCreateFlagsEXT(c_void);

impl ::std::fmt::Debug for VkHeadlessSurfaceCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkHeadlessSurfaceCreateFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkHeadlessSurfaceCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkHeadlessSurfaceCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkHeadlessSurfaceCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImage(c_void);

impl ::std::fmt::Debug for VkImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImage @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageAspectFlagBits(c_void);

impl ::std::fmt::Debug for VkImageAspectFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageAspectFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageAspectFlags(c_void);

impl ::std::fmt::Debug for VkImageAspectFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageAspectFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageBlit(c_void);

impl ::std::fmt::Debug for VkImageBlit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageBlit @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageCopy(c_void);

impl ::std::fmt::Debug for VkImageCopy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageCopy @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkImageCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageCreateFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageCreateFlags(c_void);

impl ::std::fmt::Debug for VkImageCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageCreateInfo(c_void);

impl ::std::fmt::Debug for VkImageCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkImageDrmFormatModifierExplicitCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageDrmFormatModifierExplicitCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkImageDrmFormatModifierListCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageDrmFormatModifierListCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageDrmFormatModifierPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkImageDrmFormatModifierPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageDrmFormatModifierPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageFormatListCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkImageFormatListCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageFormatListCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageFormatProperties(c_void);

impl ::std::fmt::Debug for VkImageFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageFormatProperties @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageFormatProperties2(c_void);

impl ::std::fmt::Debug for VkImageFormatProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageFormatProperties2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageFormatProperties2KHR(c_void);

impl ::std::fmt::Debug for VkImageFormatProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageFormatProperties2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageLayout(c_void);

impl ::std::fmt::Debug for VkImageLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageLayout @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageMemoryBarrier(c_void);

impl ::std::fmt::Debug for VkImageMemoryBarrier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageMemoryBarrier @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageMemoryRequirementsInfo2(c_void);

impl ::std::fmt::Debug for VkImageMemoryRequirementsInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageMemoryRequirementsInfo2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageMemoryRequirementsInfo2KHR(c_void);

impl ::std::fmt::Debug for VkImageMemoryRequirementsInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageMemoryRequirementsInfo2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImagePlaneMemoryRequirementsInfo(c_void);

impl ::std::fmt::Debug for VkImagePlaneMemoryRequirementsInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImagePlaneMemoryRequirementsInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImagePlaneMemoryRequirementsInfoKHR(c_void);

impl ::std::fmt::Debug for VkImagePlaneMemoryRequirementsInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImagePlaneMemoryRequirementsInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageResolve(c_void);

impl ::std::fmt::Debug for VkImageResolve {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageResolve @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageSparseMemoryRequirementsInfo2(c_void);

impl ::std::fmt::Debug for VkImageSparseMemoryRequirementsInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageSparseMemoryRequirementsInfo2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageSparseMemoryRequirementsInfo2KHR(c_void);

impl ::std::fmt::Debug for VkImageSparseMemoryRequirementsInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageSparseMemoryRequirementsInfo2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageStencilUsageCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkImageStencilUsageCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageStencilUsageCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageSubresource(c_void);

impl ::std::fmt::Debug for VkImageSubresource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageSubresource @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageSubresourceLayers(c_void);

impl ::std::fmt::Debug for VkImageSubresourceLayers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageSubresourceLayers @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageSubresourceRange(c_void);

impl ::std::fmt::Debug for VkImageSubresourceRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageSubresourceRange @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageSwapchainCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkImageSwapchainCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageSwapchainCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageTiling(c_void);

impl ::std::fmt::Debug for VkImageTiling {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageTiling @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageType(c_void);

impl ::std::fmt::Debug for VkImageType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageUsageFlagBits(c_void);

impl ::std::fmt::Debug for VkImageUsageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageUsageFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageUsageFlags(c_void);

impl ::std::fmt::Debug for VkImageUsageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageUsageFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageView(c_void);

impl ::std::fmt::Debug for VkImageView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageView @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageViewASTCDecodeModeEXT(c_void);

impl ::std::fmt::Debug for VkImageViewASTCDecodeModeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageViewASTCDecodeModeEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageViewCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkImageViewCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageViewCreateFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageViewCreateFlags(c_void);

impl ::std::fmt::Debug for VkImageViewCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageViewCreateInfo(c_void);

impl ::std::fmt::Debug for VkImageViewCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageViewHandleInfoNVX(c_void);

impl ::std::fmt::Debug for VkImageViewHandleInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageViewHandleInfoNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageViewType(c_void);

impl ::std::fmt::Debug for VkImageViewType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImageViewType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImageViewUsageCreateInfo(c_void);

impl ::std::fmt::Debug for VkImageViewUsageCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageViewUsageCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImageViewUsageCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkImageViewUsageCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImageViewUsageCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImportFenceFdInfoKHR(c_void);

impl ::std::fmt::Debug for VkImportFenceFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImportFenceFdInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImportMemoryFdInfoKHR(c_void);

impl ::std::fmt::Debug for VkImportMemoryFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkImportMemoryFdInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkImportMemoryHostPointerInfoEXT(c_void);

impl ::std::fmt::Debug for VkImportMemoryHostPointerInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImportMemoryHostPointerInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkImportSemaphoreFdInfoKHR(c_void);

impl ::std::fmt::Debug for VkImportSemaphoreFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkImportSemaphoreFdInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkIndexType(c_void);

impl ::std::fmt::Debug for VkIndexType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkIndexType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutCreateInfoNVX(c_void);

impl ::std::fmt::Debug for VkIndirectCommandsLayoutCreateInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkIndirectCommandsLayoutCreateInfoNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutNVX(c_void);

impl ::std::fmt::Debug for VkIndirectCommandsLayoutNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkIndirectCommandsLayoutNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutTokenNVX(c_void);

impl ::std::fmt::Debug for VkIndirectCommandsLayoutTokenNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkIndirectCommandsLayoutTokenNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutUsageFlagBitsNVX(c_void);

impl ::std::fmt::Debug for VkIndirectCommandsLayoutUsageFlagBitsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkIndirectCommandsLayoutUsageFlagBitsNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsLayoutUsageFlagsNVX(c_void);

impl ::std::fmt::Debug for VkIndirectCommandsLayoutUsageFlagsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkIndirectCommandsLayoutUsageFlagsNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsTokenNVX(c_void);

impl ::std::fmt::Debug for VkIndirectCommandsTokenNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkIndirectCommandsTokenNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkIndirectCommandsTokenTypeNVX(c_void);

impl ::std::fmt::Debug for VkIndirectCommandsTokenTypeNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkIndirectCommandsTokenTypeNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkInputAttachmentAspectReference(c_void);

impl ::std::fmt::Debug for VkInputAttachmentAspectReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkInputAttachmentAspectReference @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkInputAttachmentAspectReferenceKHR(c_void);

impl ::std::fmt::Debug for VkInputAttachmentAspectReferenceKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkInputAttachmentAspectReferenceKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkInstance(c_void);

impl ::std::fmt::Debug for VkInstance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInstance @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkInstanceCreateFlags(c_void);

impl ::std::fmt::Debug for VkInstanceCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInstanceCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkInstanceCreateInfo(c_void);

impl ::std::fmt::Debug for VkInstanceCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkInstanceCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkInternalAllocationType(c_void);

impl ::std::fmt::Debug for VkInternalAllocationType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkInternalAllocationType @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkLayerProperties(c_void);

impl ::std::fmt::Debug for VkLayerProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkLayerProperties @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkLogicOp(c_void);

impl ::std::fmt::Debug for VkLogicOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkLogicOp @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMappedMemoryRange(c_void);

impl ::std::fmt::Debug for VkMappedMemoryRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMappedMemoryRange @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagBits(c_void);

impl ::std::fmt::Debug for VkMemoryAllocateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryAllocateFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkMemoryAllocateFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryAllocateFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlags(c_void);

impl ::std::fmt::Debug for VkMemoryAllocateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagsInfo(c_void);

impl ::std::fmt::Debug for VkMemoryAllocateFlagsInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryAllocateFlagsInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagsInfoKHR(c_void);

impl ::std::fmt::Debug for VkMemoryAllocateFlagsInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryAllocateFlagsInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateFlagsKHR(c_void);

impl ::std::fmt::Debug for VkMemoryAllocateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryAllocateFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryAllocateInfo(c_void);

impl ::std::fmt::Debug for VkMemoryAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryAllocateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryBarrier(c_void);

impl ::std::fmt::Debug for VkMemoryBarrier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryBarrier @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryDedicatedAllocateInfo(c_void);

impl ::std::fmt::Debug for VkMemoryDedicatedAllocateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryDedicatedAllocateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryDedicatedAllocateInfoKHR(c_void);

impl ::std::fmt::Debug for VkMemoryDedicatedAllocateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryDedicatedAllocateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryDedicatedRequirements(c_void);

impl ::std::fmt::Debug for VkMemoryDedicatedRequirements {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryDedicatedRequirements @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryDedicatedRequirementsKHR(c_void);

impl ::std::fmt::Debug for VkMemoryDedicatedRequirementsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryDedicatedRequirementsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryFdPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkMemoryFdPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryFdPropertiesKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryGetFdInfoKHR(c_void);

impl ::std::fmt::Debug for VkMemoryGetFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryGetFdInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryHeap(c_void);

impl ::std::fmt::Debug for VkMemoryHeap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryHeap @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryHeapFlagBits(c_void);

impl ::std::fmt::Debug for VkMemoryHeapFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryHeapFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryHeapFlags(c_void);

impl ::std::fmt::Debug for VkMemoryHeapFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryHeapFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryHostPointerPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkMemoryHostPointerPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryHostPointerPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryMapFlags(c_void);

impl ::std::fmt::Debug for VkMemoryMapFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryMapFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryOverallocationBehaviorAMD(c_void);

impl ::std::fmt::Debug for VkMemoryOverallocationBehaviorAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryOverallocationBehaviorAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryPriorityAllocateInfoEXT(c_void);

impl ::std::fmt::Debug for VkMemoryPriorityAllocateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryPriorityAllocateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryPropertyFlagBits(c_void);

impl ::std::fmt::Debug for VkMemoryPropertyFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryPropertyFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryPropertyFlags(c_void);

impl ::std::fmt::Debug for VkMemoryPropertyFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryPropertyFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryRequirements(c_void);

impl ::std::fmt::Debug for VkMemoryRequirements {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryRequirements @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryRequirements2(c_void);

impl ::std::fmt::Debug for VkMemoryRequirements2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryRequirements2 @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMemoryRequirements2KHR(c_void);

impl ::std::fmt::Debug for VkMemoryRequirements2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMemoryRequirements2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkMemoryType(c_void);

impl ::std::fmt::Debug for VkMemoryType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkMemoryType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkMultisamplePropertiesEXT(c_void);

impl ::std::fmt::Debug for VkMultisamplePropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkMultisamplePropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectEntryTypeNVX(c_void);

impl ::std::fmt::Debug for VkObjectEntryTypeNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectEntryTypeNVX @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkObjectEntryUsageFlagBitsNVX(c_void);

impl ::std::fmt::Debug for VkObjectEntryUsageFlagBitsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkObjectEntryUsageFlagBitsNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectEntryUsageFlagsNVX(c_void);

impl ::std::fmt::Debug for VkObjectEntryUsageFlagsNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkObjectEntryUsageFlagsNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableCreateInfoNVX(c_void);

impl ::std::fmt::Debug for VkObjectTableCreateInfoNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkObjectTableCreateInfoNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableDescriptorSetEntryNVX(c_void);

impl ::std::fmt::Debug for VkObjectTableDescriptorSetEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkObjectTableDescriptorSetEntryNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableEntryNVX(c_void);

impl ::std::fmt::Debug for VkObjectTableEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTableEntryNVX @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableIndexBufferEntryNVX(c_void);

impl ::std::fmt::Debug for VkObjectTableIndexBufferEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkObjectTableIndexBufferEntryNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableNVX(c_void);

impl ::std::fmt::Debug for VkObjectTableNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectTableNVX @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkObjectTablePipelineEntryNVX(c_void);

impl ::std::fmt::Debug for VkObjectTablePipelineEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkObjectTablePipelineEntryNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectTablePushConstantEntryNVX(c_void);

impl ::std::fmt::Debug for VkObjectTablePushConstantEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkObjectTablePushConstantEntryNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectTableVertexBufferEntryNVX(c_void);

impl ::std::fmt::Debug for VkObjectTableVertexBufferEntryNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkObjectTableVertexBufferEntryNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkObjectType(c_void);

impl ::std::fmt::Debug for VkObjectType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkObjectType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkOffset2D(c_void);

impl ::std::fmt::Debug for VkOffset2D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkOffset2D @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkOffset3D(c_void);

impl ::std::fmt::Debug for VkOffset3D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkOffset3D @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPastPresentationTimingGOOGLE(c_void);

impl ::std::fmt::Debug for VkPastPresentationTimingGOOGLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPastPresentationTimingGOOGLE @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPeerMemoryFeatureFlagBits(c_void);

impl ::std::fmt::Debug for VkPeerMemoryFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPeerMemoryFeatureFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPeerMemoryFeatureFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkPeerMemoryFeatureFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPeerMemoryFeatureFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPeerMemoryFeatureFlags(c_void);

impl ::std::fmt::Debug for VkPeerMemoryFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPeerMemoryFeatureFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPeerMemoryFeatureFlagsKHR(c_void);

impl ::std::fmt::Debug for VkPeerMemoryFeatureFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPeerMemoryFeatureFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevice(c_void);

impl ::std::fmt::Debug for VkPhysicalDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDevice @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevice16BitStorageFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDevice16BitStorageFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDevice16BitStorageFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevice16BitStorageFeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDevice16BitStorageFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDevice16BitStorageFeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevice8BitStorageFeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDevice8BitStorageFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDevice8BitStorageFeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceASTCDecodeFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceASTCDecodeFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceBufferAddressFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceBufferAddressFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceBufferAddressFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceConditionalRenderingFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceConservativeRasterizationPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceCooperativeMatrixFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceCooperativeMatrixPropertiesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceCornerSampledImageFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceCornerSampledImageFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceCoverageReductionModeFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceDepthClipEnableFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDepthStencilResolvePropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceDepthStencilResolvePropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceDepthStencilResolvePropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDescriptorIndexingFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceDescriptorIndexingFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceDescriptorIndexingFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDescriptorIndexingPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceDescriptorIndexingPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceDescriptorIndexingPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceDiscardRectanglePropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceDriverPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceDriverPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceDriverPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExclusiveScissorFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExclusiveScissorFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalBufferInfo(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalBufferInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalBufferInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalBufferInfoKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalBufferInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalBufferInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalFenceInfo(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalFenceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalFenceInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalFenceInfoKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalFenceInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalFenceInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalImageFormatInfo(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalImageFormatInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalImageFormatInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalImageFormatInfoKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalImageFormatInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalImageFormatInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalMemoryHostPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalSemaphoreInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalSemaphoreInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceExternalSemaphoreInfoKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceExternalSemaphoreInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceExternalSemaphoreInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFeatures2(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceFeatures2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceFeatures2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFeatures2KHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceFeatures2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceFeatures2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFloat16Int8FeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceFloat16Int8FeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceFloat16Int8FeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFloatControlsPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceFloatControlsPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceFloatControlsPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceFragmentDensityMapFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceFragmentDensityMapPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceGroupProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceGroupProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceGroupProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceGroupPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceGroupPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceGroupPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceHostQueryResetFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceHostQueryResetFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceHostQueryResetFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceIDProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceIDProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceIDProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceIDPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceIDPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceIDPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceImageDrmFormatModifierInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceImageFormatInfo2(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceImageFormatInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceImageFormatInfo2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceImageFormatInfo2KHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceImageFormatInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceImageFormatInfo2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceImageViewImageFormatInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceImageViewImageFormatInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceInlineUniformBlockFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceInlineUniformBlockFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceInlineUniformBlockPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceInlineUniformBlockPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceLimits(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceLimits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceLimits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMaintenance3Properties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMaintenance3Properties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMaintenance3Properties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMaintenance3PropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMaintenance3PropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMaintenance3PropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMemoryBudgetPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMemoryPriorityFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMemoryProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryProperties2(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMemoryProperties2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMemoryProperties2KHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMemoryProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMemoryProperties2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMeshShaderFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMeshShaderFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMeshShaderPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMeshShaderPropertiesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMultiviewFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewFeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMultiviewFeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMultiviewProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceMultiviewPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceMultiviewPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceMultiviewPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDevicePCIBusInfoPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDevicePCIBusInfoPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevicePointClippingProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDevicePointClippingProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDevicePointClippingProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevicePointClippingPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDevicePointClippingPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDevicePointClippingPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProperties2(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceProperties2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProperties2KHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceProperties2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceProtectedMemoryFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceProtectedMemoryFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceProtectedMemoryProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceProtectedMemoryProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceProtectedMemoryProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDevicePushDescriptorPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDevicePushDescriptorPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDevicePushDescriptorPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceRayTracingPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceRayTracingPropertiesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSampleLocationsPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSampleLocationsPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSamplerYcbcrConversionFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceScalarBlockLayoutFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderAtomicInt64FeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceShaderAtomicInt64FeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceShaderCorePropertiesAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceShaderCorePropertiesAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderDrawParameterFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceShaderDrawParameterFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceShaderDrawParameterFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceShaderDrawParametersFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceShaderDrawParametersFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceShaderImageFootprintFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceShadingRateImageFeaturesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceShadingRateImageFeaturesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceShadingRateImagePropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceShadingRateImagePropertiesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSparseImageFormatInfo2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSparseImageFormatInfo2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2KHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSparseImageFormatInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSparseImageFormatInfo2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSparseProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSparseProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSparseProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSubgroupProperties(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSubgroupProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSubgroupProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceSurfaceInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceSurfaceInfo2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceTransformFeedbackFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceTransformFeedbackPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceType(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPhysicalDeviceType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVariablePointerFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceVariablePointerFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceVariablePointerFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVariablePointerFeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceVariablePointerFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceVariablePointerFeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVariablePointersFeatures(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceVariablePointersFeatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceVariablePointersFeatures @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVariablePointersFeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceVariablePointersFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceVariablePointersFeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeaturesKHR(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceVulkanMemoryModelFeaturesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipeline(c_void);

impl ::std::fmt::Debug for VkPipeline {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipeline @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPipelineBindPoint(c_void);

impl ::std::fmt::Debug for VkPipelineBindPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineBindPoint @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCache(c_void);

impl ::std::fmt::Debug for VkPipelineCache {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCache @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCacheCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineCacheCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCacheCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCacheCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineCacheCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCacheCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCacheHeaderVersion(c_void);

impl ::std::fmt::Debug for VkPipelineCacheHeaderVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCacheHeaderVersion @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineColorBlendAdvancedStateCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineColorBlendAttachmentState(c_void);

impl ::std::fmt::Debug for VkPipelineColorBlendAttachmentState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineColorBlendAttachmentState @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineColorBlendStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineColorBlendStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineColorBlendStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineColorBlendStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineColorBlendStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineColorBlendStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageModulationStateCreateFlagsNV(c_void);

impl ::std::fmt::Debug for VkPipelineCoverageModulationStateCreateFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCoverageModulationStateCreateFlagsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineCoverageModulationStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCoverageModulationStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageReductionStateCreateFlagsNV(c_void);

impl ::std::fmt::Debug for VkPipelineCoverageReductionStateCreateFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCoverageReductionStateCreateFlagsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineCoverageReductionStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCoverageReductionStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageToColorStateCreateFlagsNV(c_void);

impl ::std::fmt::Debug for VkPipelineCoverageToColorStateCreateFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCoverageToColorStateCreateFlagsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineCoverageToColorStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCoverageToColorStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkPipelineCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCreateFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreationFeedbackCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkPipelineCreationFeedbackCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCreationFeedbackCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreationFeedbackEXT(c_void);

impl ::std::fmt::Debug for VkPipelineCreationFeedbackEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCreationFeedbackEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreationFeedbackFlagBitsEXT(c_void);

impl ::std::fmt::Debug for VkPipelineCreationFeedbackFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCreationFeedbackFlagBitsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineCreationFeedbackFlagsEXT(c_void);

impl ::std::fmt::Debug for VkPipelineCreationFeedbackFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineCreationFeedbackFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDepthStencilStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineDepthStencilStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineDepthStencilStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDepthStencilStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineDepthStencilStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineDepthStencilStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDiscardRectangleStateCreateFlagsEXT(c_void);

impl ::std::fmt::Debug for VkPipelineDiscardRectangleStateCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineDiscardRectangleStateCreateFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkPipelineDiscardRectangleStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineDiscardRectangleStateCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDynamicStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineDynamicStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineDynamicStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineDynamicStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineDynamicStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineDynamicStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineInputAssemblyStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineInputAssemblyStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineInputAssemblyStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineInputAssemblyStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineInputAssemblyStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineInputAssemblyStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineLayout(c_void);

impl ::std::fmt::Debug for VkPipelineLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineLayout @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPipelineLayoutCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineLayoutCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineLayoutCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineLayoutCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineLayoutCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineLayoutCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineMultisampleStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineMultisampleStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineMultisampleStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineMultisampleStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineMultisampleStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineMultisampleStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationConservativeStateCreateFlagsEXT(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationConservativeStateCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationConservativeStateCreateFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationConservativeStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationConservativeStateCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationDepthClipStateCreateFlagsEXT(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationDepthClipStateCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationDepthClipStateCreateFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationDepthClipStateCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationStateRasterizationOrderAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationStateRasterizationOrderAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateStreamCreateFlagsEXT(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationStateStreamCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationStateStreamCreateFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkPipelineRasterizationStateStreamCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRasterizationStateStreamCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineRepresentativeFragmentTestStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkPipelineSampleLocationsStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineSampleLocationsStateCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineShaderStageCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineShaderStageCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineShaderStageCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineShaderStageCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineShaderStageCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineShaderStageCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineStageFlagBits(c_void);

impl ::std::fmt::Debug for VkPipelineStageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineStageFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPipelineStageFlags(c_void);

impl ::std::fmt::Debug for VkPipelineStageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPipelineStageFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineTessellationDomainOriginStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineTessellationDomainOriginStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkPipelineTessellationDomainOriginStateCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineTessellationDomainOriginStateCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineTessellationStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineTessellationStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineTessellationStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineTessellationStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineTessellationStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineTessellationStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineVertexInputDivisorStateCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkPipelineVertexInputDivisorStateCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineVertexInputDivisorStateCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineVertexInputStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineVertexInputStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineVertexInputStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineVertexInputStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineVertexInputStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineVertexInputStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineViewportExclusiveScissorStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineViewportShadingRateImageStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineViewportShadingRateImageStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportStateCreateFlags(c_void);

impl ::std::fmt::Debug for VkPipelineViewportStateCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineViewportStateCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportStateCreateInfo(c_void);

impl ::std::fmt::Debug for VkPipelineViewportStateCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineViewportStateCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportSwizzleStateCreateFlagsNV(c_void);

impl ::std::fmt::Debug for VkPipelineViewportSwizzleStateCreateFlagsNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineViewportSwizzleStateCreateFlagsNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineViewportSwizzleStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineViewportSwizzleStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkPipelineViewportWScalingStateCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPipelineViewportWScalingStateCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPointClippingBehavior(c_void);

impl ::std::fmt::Debug for VkPointClippingBehavior {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPointClippingBehavior @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPointClippingBehaviorKHR(c_void);

impl ::std::fmt::Debug for VkPointClippingBehaviorKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPointClippingBehaviorKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPolygonMode(c_void);

impl ::std::fmt::Debug for VkPolygonMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPolygonMode @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPresentInfoKHR(c_void);

impl ::std::fmt::Debug for VkPresentInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPresentModeKHR(c_void);

impl ::std::fmt::Debug for VkPresentModeKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentModeKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPresentRegionKHR(c_void);

impl ::std::fmt::Debug for VkPresentRegionKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentRegionKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPresentRegionsKHR(c_void);

impl ::std::fmt::Debug for VkPresentRegionsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentRegionsKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPresentTimeGOOGLE(c_void);

impl ::std::fmt::Debug for VkPresentTimeGOOGLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPresentTimeGOOGLE @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPresentTimesInfoGOOGLE(c_void);

impl ::std::fmt::Debug for VkPresentTimesInfoGOOGLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkPresentTimesInfoGOOGLE @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkPrimitiveTopology(c_void);

impl ::std::fmt::Debug for VkPrimitiveTopology {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPrimitiveTopology @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkProtectedSubmitInfo(c_void);

impl ::std::fmt::Debug for VkProtectedSubmitInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkProtectedSubmitInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkPushConstantRange(c_void);

impl ::std::fmt::Debug for VkPushConstantRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkPushConstantRange @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueryControlFlagBits(c_void);

impl ::std::fmt::Debug for VkQueryControlFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryControlFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueryControlFlags(c_void);

impl ::std::fmt::Debug for VkQueryControlFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryControlFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueryPipelineStatisticFlagBits(c_void);

impl ::std::fmt::Debug for VkQueryPipelineStatisticFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkQueryPipelineStatisticFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkQueryPipelineStatisticFlags(c_void);

impl ::std::fmt::Debug for VkQueryPipelineStatisticFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkQueryPipelineStatisticFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkQueryPool(c_void);

impl ::std::fmt::Debug for VkQueryPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryPool @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueryPoolCreateFlags(c_void);

impl ::std::fmt::Debug for VkQueryPoolCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryPoolCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueryPoolCreateInfo(c_void);

impl ::std::fmt::Debug for VkQueryPoolCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryPoolCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueryResultFlagBits(c_void);

impl ::std::fmt::Debug for VkQueryResultFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryResultFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueryResultFlags(c_void);

impl ::std::fmt::Debug for VkQueryResultFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryResultFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueryType(c_void);

impl ::std::fmt::Debug for VkQueryType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueryType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueue(c_void);

impl ::std::fmt::Debug for VkQueue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueue @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueueFamilyCheckpointPropertiesNV(c_void);

impl ::std::fmt::Debug for VkQueueFamilyCheckpointPropertiesNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkQueueFamilyCheckpointPropertiesNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkQueueFamilyProperties(c_void);

impl ::std::fmt::Debug for VkQueueFamilyProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFamilyProperties @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueueFamilyProperties2(c_void);

impl ::std::fmt::Debug for VkQueueFamilyProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkQueueFamilyProperties2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkQueueFamilyProperties2KHR(c_void);

impl ::std::fmt::Debug for VkQueueFamilyProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkQueueFamilyProperties2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkQueueFlagBits(c_void);

impl ::std::fmt::Debug for VkQueueFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueueFlags(c_void);

impl ::std::fmt::Debug for VkQueueFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkQueueFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkQueueGlobalPriorityEXT(c_void);

impl ::std::fmt::Debug for VkQueueGlobalPriorityEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkQueueGlobalPriorityEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRasterizationOrderAMD(c_void);

impl ::std::fmt::Debug for VkRasterizationOrderAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRasterizationOrderAMD @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkRayTracingPipelineCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkRayTracingPipelineCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRayTracingPipelineCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRayTracingShaderGroupCreateInfoNV(c_void);

impl ::std::fmt::Debug for VkRayTracingShaderGroupCreateInfoNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRayTracingShaderGroupCreateInfoNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRayTracingShaderGroupTypeNV(c_void);

impl ::std::fmt::Debug for VkRayTracingShaderGroupTypeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRayTracingShaderGroupTypeNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRect2D(c_void);

impl ::std::fmt::Debug for VkRect2D {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRect2D @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkRectLayerKHR(c_void);

impl ::std::fmt::Debug for VkRectLayerKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRectLayerKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkRefreshCycleDurationGOOGLE(c_void);

impl ::std::fmt::Debug for VkRefreshCycleDurationGOOGLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRefreshCycleDurationGOOGLE @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRenderPass(c_void);

impl ::std::fmt::Debug for VkRenderPass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPass @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassBeginInfo(c_void);

impl ::std::fmt::Debug for VkRenderPassBeginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassBeginInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassCreateFlags(c_void);

impl ::std::fmt::Debug for VkRenderPassCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassCreateInfo(c_void);

impl ::std::fmt::Debug for VkRenderPassCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkRenderPassCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassCreateInfo2KHR(c_void);

impl ::std::fmt::Debug for VkRenderPassCreateInfo2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRenderPassCreateInfo2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkRenderPassFragmentDensityMapCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRenderPassFragmentDensityMapCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo(c_void);

impl ::std::fmt::Debug for VkRenderPassInputAttachmentAspectCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRenderPassInputAttachmentAspectCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassInputAttachmentAspectCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkRenderPassInputAttachmentAspectCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRenderPassInputAttachmentAspectCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassMultiviewCreateInfo(c_void);

impl ::std::fmt::Debug for VkRenderPassMultiviewCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRenderPassMultiviewCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassMultiviewCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkRenderPassMultiviewCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRenderPassMultiviewCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT(c_void);

impl ::std::fmt::Debug for VkRenderPassSampleLocationsBeginInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkRenderPassSampleLocationsBeginInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkResolveModeFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkResolveModeFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkResolveModeFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkResolveModeFlagsKHR(c_void);

impl ::std::fmt::Debug for VkResolveModeFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkResolveModeFlagsKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkResult(c_void);

impl ::std::fmt::Debug for VkResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkResult @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSampleCountFlagBits(c_void);

impl ::std::fmt::Debug for VkSampleCountFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleCountFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSampleCountFlags(c_void);

impl ::std::fmt::Debug for VkSampleCountFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleCountFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSampleLocationEXT(c_void);

impl ::std::fmt::Debug for VkSampleLocationEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleLocationEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSampleLocationsInfoEXT(c_void);

impl ::std::fmt::Debug for VkSampleLocationsInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSampleLocationsInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSampleMask(c_void);

impl ::std::fmt::Debug for VkSampleMask {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampleMask @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSampler(c_void);

impl ::std::fmt::Debug for VkSampler {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSampler @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSamplerAddressMode(c_void);

impl ::std::fmt::Debug for VkSamplerAddressMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerAddressMode @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSamplerCreateFlagBits(c_void);

impl ::std::fmt::Debug for VkSamplerCreateFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerCreateFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSamplerCreateFlags(c_void);

impl ::std::fmt::Debug for VkSamplerCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSamplerCreateInfo(c_void);

impl ::std::fmt::Debug for VkSamplerCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSamplerMipmapMode(c_void);

impl ::std::fmt::Debug for VkSamplerMipmapMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerMipmapMode @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSamplerReductionModeCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkSamplerReductionModeCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerReductionModeCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerReductionModeEXT(c_void);

impl ::std::fmt::Debug for VkSamplerReductionModeEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerReductionModeEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversion(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrConversion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrConversion @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionCreateInfo(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrConversionCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrConversionCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrConversionCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrConversionCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionImageFormatProperties(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrConversionImageFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrConversionImageFormatProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionImageFormatPropertiesKHR(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrConversionImageFormatPropertiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrConversionImageFormatPropertiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionInfo(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrConversionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrConversionInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionInfoKHR(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrConversionInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrConversionInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrConversionKHR(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrConversionKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrConversionKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrModelConversion(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrModelConversion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrModelConversion @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrModelConversionKHR(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrModelConversionKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSamplerYcbcrModelConversionKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrRange(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrRange @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSamplerYcbcrRangeKHR(c_void);

impl ::std::fmt::Debug for VkSamplerYcbcrRangeKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSamplerYcbcrRangeKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkScopeNV(c_void);

impl ::std::fmt::Debug for VkScopeNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkScopeNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSemaphore(c_void);

impl ::std::fmt::Debug for VkSemaphore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphore @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreCreateFlags(c_void);

impl ::std::fmt::Debug for VkSemaphoreCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreCreateFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreCreateInfo(c_void);

impl ::std::fmt::Debug for VkSemaphoreCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreCreateInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreGetFdInfoKHR(c_void);

impl ::std::fmt::Debug for VkSemaphoreGetFdInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreGetFdInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreImportFlagBits(c_void);

impl ::std::fmt::Debug for VkSemaphoreImportFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSemaphoreImportFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreImportFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkSemaphoreImportFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSemaphoreImportFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreImportFlags(c_void);

impl ::std::fmt::Debug for VkSemaphoreImportFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSemaphoreImportFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSemaphoreImportFlagsKHR(c_void);

impl ::std::fmt::Debug for VkSemaphoreImportFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSemaphoreImportFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkShaderInfoTypeAMD(c_void);

impl ::std::fmt::Debug for VkShaderInfoTypeAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderInfoTypeAMD @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkShaderModule(c_void);

impl ::std::fmt::Debug for VkShaderModule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderModule @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkShaderModuleCreateFlags(c_void);

impl ::std::fmt::Debug for VkShaderModuleCreateFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkShaderModuleCreateFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkShaderModuleCreateInfo(c_void);

impl ::std::fmt::Debug for VkShaderModuleCreateInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkShaderModuleCreateInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkShaderModuleValidationCacheCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkShaderModuleValidationCacheCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkShaderResourceUsageAMD(c_void);

impl ::std::fmt::Debug for VkShaderResourceUsageAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkShaderResourceUsageAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkShaderStageFlagBits(c_void);

impl ::std::fmt::Debug for VkShaderStageFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderStageFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkShaderStageFlags(c_void);

impl ::std::fmt::Debug for VkShaderStageFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShaderStageFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkShaderStatisticsInfoAMD(c_void);

impl ::std::fmt::Debug for VkShaderStatisticsInfoAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkShaderStatisticsInfoAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkShadingRatePaletteEntryNV(c_void);

impl ::std::fmt::Debug for VkShadingRatePaletteEntryNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkShadingRatePaletteEntryNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkShadingRatePaletteNV(c_void);

impl ::std::fmt::Debug for VkShadingRatePaletteNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkShadingRatePaletteNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR(c_void);

impl ::std::fmt::Debug for VkSharedPresentSurfaceCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSharedPresentSurfaceCapabilitiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSharingMode(c_void);

impl ::std::fmt::Debug for VkSharingMode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSharingMode @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSparseBufferMemoryBindInfo(c_void);

impl ::std::fmt::Debug for VkSparseBufferMemoryBindInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseBufferMemoryBindInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatFlagBits(c_void);

impl ::std::fmt::Debug for VkSparseImageFormatFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageFormatFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatFlags(c_void);

impl ::std::fmt::Debug for VkSparseImageFormatFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageFormatFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatProperties(c_void);

impl ::std::fmt::Debug for VkSparseImageFormatProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageFormatProperties @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatProperties2(c_void);

impl ::std::fmt::Debug for VkSparseImageFormatProperties2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageFormatProperties2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageFormatProperties2KHR(c_void);

impl ::std::fmt::Debug for VkSparseImageFormatProperties2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageFormatProperties2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryBind(c_void);

impl ::std::fmt::Debug for VkSparseImageMemoryBind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseImageMemoryBind @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryBindInfo(c_void);

impl ::std::fmt::Debug for VkSparseImageMemoryBindInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageMemoryBindInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryRequirements(c_void);

impl ::std::fmt::Debug for VkSparseImageMemoryRequirements {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageMemoryRequirements @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryRequirements2(c_void);

impl ::std::fmt::Debug for VkSparseImageMemoryRequirements2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageMemoryRequirements2 @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageMemoryRequirements2KHR(c_void);

impl ::std::fmt::Debug for VkSparseImageMemoryRequirements2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageMemoryRequirements2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseImageOpaqueMemoryBindInfo(c_void);

impl ::std::fmt::Debug for VkSparseImageOpaqueMemoryBindInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseImageOpaqueMemoryBindInfo @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseMemoryBind(c_void);

impl ::std::fmt::Debug for VkSparseMemoryBind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseMemoryBind @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSparseMemoryBindFlagBits(c_void);

impl ::std::fmt::Debug for VkSparseMemoryBindFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSparseMemoryBindFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSparseMemoryBindFlags(c_void);

impl ::std::fmt::Debug for VkSparseMemoryBindFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSparseMemoryBindFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSpecializationInfo(c_void);

impl ::std::fmt::Debug for VkSpecializationInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSpecializationInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSpecializationMapEntry(c_void);

impl ::std::fmt::Debug for VkSpecializationMapEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSpecializationMapEntry @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkStencilFaceFlagBits(c_void);

impl ::std::fmt::Debug for VkStencilFaceFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStencilFaceFlagBits @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkStencilFaceFlags(c_void);

impl ::std::fmt::Debug for VkStencilFaceFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStencilFaceFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkStencilOp(c_void);

impl ::std::fmt::Debug for VkStencilOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStencilOp @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkStencilOpState(c_void);

impl ::std::fmt::Debug for VkStencilOpState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStencilOpState @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkStructureType(c_void);

impl ::std::fmt::Debug for VkStructureType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkStructureType @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubgroupFeatureFlagBits(c_void);

impl ::std::fmt::Debug for VkSubgroupFeatureFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSubgroupFeatureFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSubgroupFeatureFlags(c_void);

impl ::std::fmt::Debug for VkSubgroupFeatureFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubgroupFeatureFlags @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubmitInfo(c_void);

impl ::std::fmt::Debug for VkSubmitInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubmitInfo @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubpassBeginInfoKHR(c_void);

impl ::std::fmt::Debug for VkSubpassBeginInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassBeginInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubpassContents(c_void);

impl ::std::fmt::Debug for VkSubpassContents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassContents @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDependency(c_void);

impl ::std::fmt::Debug for VkSubpassDependency {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDependency @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDependency2KHR(c_void);

impl ::std::fmt::Debug for VkSubpassDependency2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDependency2KHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescription(c_void);

impl ::std::fmt::Debug for VkSubpassDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassDescription @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescription2KHR(c_void);

impl ::std::fmt::Debug for VkSubpassDescription2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSubpassDescription2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescriptionDepthStencilResolveKHR(c_void);

impl ::std::fmt::Debug for VkSubpassDescriptionDepthStencilResolveKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSubpassDescriptionDepthStencilResolveKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescriptionFlagBits(c_void);

impl ::std::fmt::Debug for VkSubpassDescriptionFlagBits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSubpassDescriptionFlagBits @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSubpassDescriptionFlags(c_void);

impl ::std::fmt::Debug for VkSubpassDescriptionFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSubpassDescriptionFlags @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSubpassEndInfoKHR(c_void);

impl ::std::fmt::Debug for VkSubpassEndInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubpassEndInfoKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSubpassSampleLocationsEXT(c_void);

impl ::std::fmt::Debug for VkSubpassSampleLocationsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSubpassSampleLocationsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSubresourceLayout(c_void);

impl ::std::fmt::Debug for VkSubresourceLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSubresourceLayout @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCapabilities2EXT(c_void);

impl ::std::fmt::Debug for VkSurfaceCapabilities2EXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSurfaceCapabilities2EXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCapabilities2KHR(c_void);

impl ::std::fmt::Debug for VkSurfaceCapabilities2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSurfaceCapabilities2KHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCapabilitiesKHR(c_void);

impl ::std::fmt::Debug for VkSurfaceCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSurfaceCapabilitiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCounterFlagBitsEXT(c_void);

impl ::std::fmt::Debug for VkSurfaceCounterFlagBitsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSurfaceCounterFlagBitsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceCounterFlagsEXT(c_void);

impl ::std::fmt::Debug for VkSurfaceCounterFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSurfaceCounterFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceFormat2KHR(c_void);

impl ::std::fmt::Debug for VkSurfaceFormat2KHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceFormat2KHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceFormatKHR(c_void);

impl ::std::fmt::Debug for VkSurfaceFormatKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceFormatKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceKHR(c_void);

impl ::std::fmt::Debug for VkSurfaceKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSurfaceKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceProtectedCapabilitiesKHR(c_void);

impl ::std::fmt::Debug for VkSurfaceProtectedCapabilitiesKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSurfaceProtectedCapabilitiesKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceTransformFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkSurfaceTransformFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSurfaceTransformFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSurfaceTransformFlagsKHR(c_void);

impl ::std::fmt::Debug for VkSurfaceTransformFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSurfaceTransformFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainCounterCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkSwapchainCounterCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSwapchainCounterCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainCreateFlagBitsKHR(c_void);

impl ::std::fmt::Debug for VkSwapchainCreateFlagBitsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSwapchainCreateFlagBitsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainCreateFlagsKHR(c_void);

impl ::std::fmt::Debug for VkSwapchainCreateFlagsKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSwapchainCreateFlagsKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainCreateInfoKHR(c_void);

impl ::std::fmt::Debug for VkSwapchainCreateInfoKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSwapchainCreateInfoKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD(c_void);

impl ::std::fmt::Debug for VkSwapchainDisplayNativeHdrCreateInfoAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkSwapchainDisplayNativeHdrCreateInfoAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkSwapchainKHR(c_void);

impl ::std::fmt::Debug for VkSwapchainKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSwapchainKHR @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkSystemAllocationScope(c_void);

impl ::std::fmt::Debug for VkSystemAllocationScope {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkSystemAllocationScope @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkTessellationDomainOrigin(c_void);

impl ::std::fmt::Debug for VkTessellationDomainOrigin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkTessellationDomainOrigin @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkTessellationDomainOriginKHR(c_void);

impl ::std::fmt::Debug for VkTessellationDomainOriginKHR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkTessellationDomainOriginKHR @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkTextureLODGatherFormatPropertiesAMD(c_void);

impl ::std::fmt::Debug for VkTextureLODGatherFormatPropertiesAMD {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkTextureLODGatherFormatPropertiesAMD @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkTimeDomainEXT(c_void);

impl ::std::fmt::Debug for VkTimeDomainEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkTimeDomainEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkValidationCacheCreateFlagsEXT(c_void);

impl ::std::fmt::Debug for VkValidationCacheCreateFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkValidationCacheCreateFlagsEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkValidationCacheCreateInfoEXT(c_void);

impl ::std::fmt::Debug for VkValidationCacheCreateInfoEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkValidationCacheCreateInfoEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkValidationCacheEXT(c_void);

impl ::std::fmt::Debug for VkValidationCacheEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationCacheEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkValidationCacheHeaderVersionEXT(c_void);

impl ::std::fmt::Debug for VkValidationCacheHeaderVersionEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkValidationCacheHeaderVersionEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkValidationCheckEXT(c_void);

impl ::std::fmt::Debug for VkValidationCheckEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationCheckEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkValidationFeatureDisableEXT(c_void);

impl ::std::fmt::Debug for VkValidationFeatureDisableEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkValidationFeatureDisableEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkValidationFeatureEnableEXT(c_void);

impl ::std::fmt::Debug for VkValidationFeatureEnableEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkValidationFeatureEnableEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkValidationFeaturesEXT(c_void);

impl ::std::fmt::Debug for VkValidationFeaturesEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationFeaturesEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkValidationFlagsEXT(c_void);

impl ::std::fmt::Debug for VkValidationFlagsEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkValidationFlagsEXT @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkVendorId(c_void);

impl ::std::fmt::Debug for VkVendorId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkVendorId @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkVertexInputAttributeDescription(c_void);

impl ::std::fmt::Debug for VkVertexInputAttributeDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkVertexInputAttributeDescription @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkVertexInputBindingDescription(c_void);

impl ::std::fmt::Debug for VkVertexInputBindingDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkVertexInputBindingDescription @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkVertexInputBindingDivisorDescriptionEXT(c_void);

impl ::std::fmt::Debug for VkVertexInputBindingDivisorDescriptionEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkVertexInputBindingDivisorDescriptionEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkVertexInputRate(c_void);

impl ::std::fmt::Debug for VkVertexInputRate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkVertexInputRate @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkViewport(c_void);

impl ::std::fmt::Debug for VkViewport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkViewport @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkViewportCoordinateSwizzleNV(c_void);

impl ::std::fmt::Debug for VkViewportCoordinateSwizzleNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkViewportCoordinateSwizzleNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkViewportSwizzleNV(c_void);

impl ::std::fmt::Debug for VkViewportSwizzleNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkViewportSwizzleNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkViewportWScalingNV(c_void);

impl ::std::fmt::Debug for VkViewportWScalingNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkViewportWScalingNV @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkWriteDescriptorSet(c_void);

impl ::std::fmt::Debug for VkWriteDescriptorSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkWriteDescriptorSet @ {:?}", self as *const _))
            .finish()
    }
}

#[repr(C)]
pub struct VkWriteDescriptorSetAccelerationStructureNV(c_void);

impl ::std::fmt::Debug for VkWriteDescriptorSetAccelerationStructureNV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkWriteDescriptorSetAccelerationStructureNV @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkWriteDescriptorSetInlineUniformBlockEXT(c_void);

impl ::std::fmt::Debug for VkWriteDescriptorSetInlineUniformBlockEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!(
            "VkWriteDescriptorSetInlineUniformBlockEXT @ {:?}",
            self as *const _
        ))
        .finish()
    }
}

#[repr(C)]
pub struct VkXYColorEXT(c_void);

impl ::std::fmt::Debug for VkXYColorEXT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("VkXYColorEXT @ {:?}", self as *const _))
            .finish()
    }
}

extern "C" {}
